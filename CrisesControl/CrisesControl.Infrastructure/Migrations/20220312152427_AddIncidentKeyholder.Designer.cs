// <auto-generated />
using System;
using CrisesControl.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrisesControl.Infrastructure.Migrations
{
    [DbContext(typeof(CrisesControlContext))]
    [Migration("20220312152427_AddIncidentKeyholder")]
    partial class AddIncidentKeyholder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CrisesControl.Core.Companies.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("AndroidLogo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("AnniversaryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<string>("CompanyLogoPath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Company_Name");

                    b.Property<string>("CompanyProfile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactLogoPath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IOslogo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("iOSLogo");

                    b.Property<string>("InvitationCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Isdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ISDCode");

                    b.Property<bool>("OnTrial")
                        .HasColumnType("bit");

                    b.Property<int?>("PackagePlanId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PlanDrdoc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PlanDRDoc");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Sector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SwitchBoardPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("UniqueKey")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Website")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WindowsLogo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompanyId");

                    b.HasIndex("PackagePlanId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Companies.CompanyParameter", b =>
                {
                    b.Property<int>("CompanyParametersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyParametersId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CompanyParametersId")
                        .HasName("PK_dbo.CompanyParameters");

                    b.HasIndex(new[] { "CompanyId", "Name" }, "IDX_Name");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId", "Name" }, "IDX_Name"), 100);

                    b.ToTable("CompanyParameter");
                });

            modelBuilder.Entity("CrisesControl.Core.Companies.CompanyPaymentProfile", b =>
                {
                    b.Property<int>("CompanyPaymentProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyPaymentProfileId"), 1L, 1);

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BillingAddress1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BillingAddress2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BillingEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset>("CardExpiryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<bool>("CardFailed")
                        .HasColumnType("bit");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CardType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("ConfUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<DateTimeOffset>("ContractAnniversary")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ContractStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Country")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("CreditBalance")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(20,4)");

                    b.Property<DateTimeOffset>("CurrentStatementEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<decimal>("EmailUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<DateTimeOffset>("LastCreditDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastStatementEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<decimal>("MaxTransactionLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumBalance")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumConfRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumEmailRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumPhoneRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumPushRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumTextRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<bool?>("OrderCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentPeriod")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("PhoneUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("PushUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("SoptokenValue")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("SOPTokenValue");

                    b.Property<DateTimeOffset>("StatementRunDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("TextUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("Vatrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("VATRate")
                        .HasDefaultValueSql("((20))");

                    b.HasKey("CompanyPaymentProfileId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyPaymentProfile", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Companies.LibCompanyParameter", b =>
                {
                    b.Property<int>("LibCompanyParametersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibCompanyParametersId"), 1L, 1);

                    b.Property<string>("AllowedValued")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Display")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ValidationRule")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("LibCompanyParametersId")
                        .HasName("PK_dbo.LibCompanyParameters");

                    b.ToTable("LibCompanyParameter");
                });

            modelBuilder.Entity("CrisesControl.Core.Companies.PackagePlan", b =>
                {
                    b.Property<int>("PackagePlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackagePlanId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal>("PackagePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PingOnly")
                        .HasColumnType("bit");

                    b.Property<string>("PlanDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PackagePlanId");

                    b.ToTable("PackagePlan", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Companies.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileIsd")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MobileISD");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("PackagePlanId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Sector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UniqueReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset?>("VerficationExpire")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("CrisesControl.Core.Departments.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("DepartmentId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "Status" }, "IDX_Status");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Status" }, "IDX_Status"), 100);

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Incidents.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentId"), 1L, 1);

                    b.Property<int>("AudioAssetId")
                        .HasColumnType("int");

                    b.Property<int>("CascadePlanId")
                        .HasColumnType("int")
                        .HasColumnName("CascadePlanID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasTask")
                        .HasColumnType("bit");

                    b.Property<string>("IncidentIcon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("IncidentPlanDoc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IncidentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSopdoc")
                        .HasColumnType("bit")
                        .HasColumnName("IsSOPDoc");

                    b.Property<bool>("IsSos")
                        .HasColumnType("bit")
                        .HasColumnName("IsSOS");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("NumberOfKeyHolders")
                        .HasColumnType("int");

                    b.Property<int>("PlanAssetId")
                        .HasColumnType("int")
                        .HasColumnName("PlanAssetID");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<bool>("SilentMessage")
                        .HasColumnType("bit");

                    b.Property<int>("SopdocId")
                        .HasColumnType("int")
                        .HasColumnName("SOPDocID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TrackUser")
                        .HasColumnType("bit");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IncidentId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Status" }, "IDX_Status"), 100);

                    b.HasIndex(new[] { "IncidentTypeId" }, "IX_IncidentTypeId");

                    b.ToTable("Incident", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Incidents.IncidentKeyholder", b =>
                {
                    b.Property<long>("IncidentKeyholderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IncidentKeyholderID"), 1L, 1);

                    b.Property<int?>("ActiveIncidentID")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("IncidentKeyholderID");

                    b.ToTable("IncidentKeyholder", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AcademyAccess", b =>
                {
                    b.Property<int>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccessID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessId"), 1L, 1);

                    b.Property<int>("AccessTo")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.ToTable("AcademyAccess", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AcademyVideo", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoId"), 1L, 1);

                    b.Property<bool>("CloseOnEsc")
                        .HasColumnType("bit");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("SourceType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("SourceURL");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("VideoDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("VideoImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VideoKey")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VideoOrder")
                        .HasColumnType("int");

                    b.Property<string>("VideoTitle")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("VideoId");

                    b.ToTable("AcademyVideo", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ActiveIncidentAction", b =>
                {
                    b.Property<int>("ActiveIncidentActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveIncidentActionId"), 1L, 1);

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IncidentActionId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentActivationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ActiveIncidentActionId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyId");

                    b.ToTable("ActiveIncidentAction", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ActiveIncidentAsset", b =>
                {
                    b.Property<int>("ActiveIncidentId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentID");

                    b.Property<int>("ActiveTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveTaskID");

                    b.Property<string>("AssetDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssetLinkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetLinkId"), 1L, 1);

                    b.Property<string>("AssetLinkType")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("AssetPath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AssetTitle")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AssetType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("int");

                    b.ToTable("ActiveIncidentAsset", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ActiveIncidentKeyContact", b =>
                {
                    b.Property<int>("ActiveIncidentKeyContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveIncidentKeyContactId"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncidentActionId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentActivationId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActiveIncidentKeyContactId");

                    b.HasIndex(new[] { "IncidentActivationId" }, "IDX_IncidentActivationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentActivationId" }, "IDX_IncidentActivationId"), 100);

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("ActiveIncidentKeyContact", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ActiveMessageResponse", b =>
                {
                    b.Property<int>("MessageResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageResponseId"), 1L, 1);

                    b.Property<int?>("ActiveIncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentID")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsSafetyResponse")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("int");

                    b.Property<int>("ResponseId")
                        .HasColumnType("int")
                        .HasColumnName("ResponseID");

                    b.Property<string>("ResponseLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SafetyAckAction")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("MessageResponseId")
                        .HasName("PK_dbo.ActiveMessageResponse");

                    b.ToTable("ActiveMessageResponse", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("AddressLabel")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AddressId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AddressLink", b =>
                {
                    b.Property<int>("AddressLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressLinkId"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AddressLinkId");

                    b.ToTable("AddressLink", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AdhocMessageNotificationList", b =>
                {
                    b.Property<int>("AdhocMessageNotificationListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdhocMessageNotificationListId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectMappingId")
                        .HasColumnType("int");

                    b.Property<int>("SourceObjectPrimaryId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("AdhocMessageNotificationListId");

                    b.HasIndex(new[] { "MessageId" }, "IDX_MessageId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MessageId" }, "IDX_MessageId"), 100);

                    b.HasIndex(new[] { "ObjectMappingId" }, "IDX_ObjectMappingId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ObjectMappingId" }, "IDX_ObjectMappingId"), 100);

                    b.HasIndex(new[] { "SourceObjectPrimaryId" }, "IDX_SourceObjectPrimaryId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SourceObjectPrimaryId" }, "IDX_SourceObjectPrimaryId"), 100);

                    b.ToTable("AdhocMessageNotificationList", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AdHocTaskParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActiveIncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentTaskID");

                    b.Property<int?>("ParticipantGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantGroupID");

                    b.Property<int?>("ParticipantTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantTypeID");

                    b.Property<int?>("ParticipantUserId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantUserID");

                    b.HasKey("Id");

                    b.ToTable("AdHocTaskParticipant", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AdminReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DownloadFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("HasParams")
                        .HasColumnType("bit");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ReportSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ReportId");

                    b.ToTable("AdminReport", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AdminReportParam", b =>
                {
                    b.Property<int>("ParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ParamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParamId"), 1L, 1);

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.HasKey("ParamId");

                    b.ToTable("AdminReportParam", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ApiKey", b =>
                {
                    b.Property<int>("ApikeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("APIKeyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApikeyId"), 1L, 1);

                    b.Property<string>("AllowedIp")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AllowedIP");

                    b.Property<string>("Apikey1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("APIKey");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ApikeyId");

                    b.ToTable("ApiKey", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AppLanguage", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<string>("FlagIcon")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("IconFolder")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("IconURL");

                    b.Property<string>("LanguageName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Locale")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Platform")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("LanguageId");

                    b.ToTable("AppLanguage", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AppUserLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Lng")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("LogDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("RequestDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ResponseDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogId")
                        .HasName("PK_dbo.AppUserLog");

                    b.ToTable("AppUserLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetId"), 1L, 1);

                    b.Property<string>("AssetDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("AssetOwner")
                        .HasColumnType("int");

                    b.Property<string>("AssetPath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<double>("AssetSize")
                        .HasColumnType("float");

                    b.Property<string>("AssetTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AssetType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ReminderCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ReviewDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReviewFrequency")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SourceFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("SourceObjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AssetId");

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Status" }, "IDX_Status"), 100);

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyId")
                        .HasDatabaseName("IX_CompanyId1");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AssetType", b =>
                {
                    b.Property<int>("AssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetTypeId"), 1L, 1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AssetTypeId");

                    b.ToTable("AssetType", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttachmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"), 1L, 1);

                    b.Property<string>("AttachmentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectID");

                    b.Property<string>("OrigFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AttachmentId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AttachmentType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("TypeName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TypeId");

                    b.ToTable("AttachmentType", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EventDateUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EventDateUTC");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.BadDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DomainName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DomainName" }, "IDX_DomainName");

                    b.ToTable("BadDomain");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CascadingPlan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("LaunchSos")
                        .HasColumnType("bit")
                        .HasColumnName("LaunchSOS");

                    b.Property<int>("LaunchSosinterval")
                        .HasColumnType("int")
                        .HasColumnName("LaunchSOSInterval");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PlanId");

                    b.ToTable("CascadingPlan", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ChargeableFeature", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LinkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"), 1L, 1);

                    b.Property<int>("SecurityObjectId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityObjectID");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    b.HasKey("LinkId")
                        .HasName("PK_dbo.ChargeableFeature");

                    b.ToTable("ChargeableFeature", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CommsLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("AnsweredBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CommsProvider")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateSent")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Direction")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromFormatted")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("NumSegments")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,4)");

                    b.Property<string>("PriceUnit")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Sid")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ToFormatted")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LogId")
                        .HasName("PK_dbo.CommsLogs");

                    b.HasIndex(new[] { "CommType" }, "IDX_CommsType");

                    b.HasIndex(new[] { "Sid" }, "IDX_SId");

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status3");

                    b.ToTable("CommsLog");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CommsLogsDump", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("AnsweredBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CommsProvider")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateSent")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Direction")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromFormatted")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("LogStatus")
                        .HasColumnType("int");

                    b.Property<int?>("NumSegments")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,4)");

                    b.Property<string>("PriceUnit")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sid")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("ToFormatted")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LogId")
                        .HasName("PK_dbo.CommsLogsDump");

                    b.ToTable("CommsLogsDump", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CommsMethod", b =>
                {
                    b.Property<int>("CommsMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommsMethodId"), 1L, 1);

                    b.Property<int>("IsDefault")
                        .HasColumnType("int");

                    b.Property<string>("MethodCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommsMethodId");

                    b.ToTable("CommsMethod", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CommsMonitor", b =>
                {
                    b.Property<int?>("EmailFailed")
                        .HasColumnType("int");

                    b.Property<string>("MessageDate")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MessageTime")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("PhoneFailed")
                        .HasColumnType("int");

                    b.Property<int?>("TextFailed")
                        .HasColumnType("int");

                    b.ToView("CommsMonitor");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyActivation", b =>
                {
                    b.Property<int>("ActivationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivationId"), 1L, 1);

                    b.Property<int>("ActivatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ActivatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ActivationKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<int>("SalesSource")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ActivationId")
                        .HasName("PK_dbo.CompanyActivation");

                    b.ToTable("CompanyActivation", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyComm", b =>
                {
                    b.Property<int>("CompanyCommsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyCommsId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.Property<bool>("ServiceStatus")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CompanyCommsId")
                        .HasName("PK_dbo.CompanyComms");

                    b.ToTable("CompanyComm");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyFtp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("DeleteSourceFile")
                        .HasColumnType("bit");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LogonType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Protocol")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RemotePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SecurityKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShafingerPrint")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SHAFingerPrint");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("CompanyFTP", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyKpi", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("IncidentKpi")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("IncidentKPI");

                    b.Property<string>("IncidentKpimax")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("IncidentKPIMax");

                    b.Property<string>("PingKpi")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PingKPI");

                    b.Property<string>("PingKpimax")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PingKPIMax");

                    b.ToView("CompanyKPI");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyKpistat", b =>
                {
                    b.Property<int?>("App")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime");

                    b.Property<int?>("DayName")
                        .HasColumnType("int");

                    b.Property<int?>("Email")
                        .HasColumnType("int");

                    b.Property<long?>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("IncidentKpi")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("IncidentKPI");

                    b.Property<string>("IncidentMaxKpi")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("IncidentMaxKPI");

                    b.Property<int?>("MonthName")
                        .HasColumnType("int");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("PingKpi")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PingKPI");

                    b.Property<string>("PingMaxKpi")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PingMaxKPI");

                    b.Property<int?>("Text")
                        .HasColumnType("int");

                    b.Property<long?>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalIncidentAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentACK");

                    b.Property<int?>("TotalIncidentInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPI");

                    b.Property<int?>("TotalIncidentNoResponse")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentNotAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentNotACK");

                    b.Property<int?>("TotalIncidentOneHour")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentOutKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentOutKPIMax");

                    b.Property<int?>("TotalIncidentSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentWithInCutOff")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingACK");

                    b.Property<int?>("TotalPingInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPI");

                    b.Property<int?>("TotalPingNoResponse")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingNotAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingNotACK");

                    b.Property<int?>("TotalPingOneHour")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingOutKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingOutKPIMax");

                    b.Property<int?>("TotalPingSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingWithInCutOff")
                        .HasColumnType("int");

                    b.Property<int?>("Web")
                        .HasColumnType("int");

                    b.Property<int?>("YearName")
                        .HasColumnType("int");

                    b.ToView("CompanyKPIStats");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyMessageResponse", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsSafetyResponse")
                        .HasColumnType("bit");

                    b.Property<int>("LibResponseId")
                        .HasColumnType("int")
                        .HasColumnName("LibResponseID");

                    b.Property<string>("MessageType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ResponseLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SafetyAckAction")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.HasKey("ResponseId")
                        .HasName("PK_dbo.CompanyMessageResponse");

                    b.ToTable("CompanyMessageResponse", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyMessageTransactionStat", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long?>("TotalEmail")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalPhone")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalPush")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalText")
                        .HasColumnType("bigint");

                    b.ToView("CompanyMessageTransactionStats");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyPackageFeature", b =>
                {
                    b.Property<int>("PackageFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageFeatureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageFeatureId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("SecurityObjectId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityObjectID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PackageFeatureId")
                        .HasName("PK_dbo.CompanyPackageFeature");

                    b.ToTable("CompanyPackageFeature", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyPackageItem", b =>
                {
                    b.Property<int>("CompanyPackageItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyPackageItemId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemValue")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CompanyPackageItemId");

                    b.ToTable("CompanyPackageItem", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CompanyTransactionType", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyTranscationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("NextRunDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PaymentPeriod")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TransactionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("CompanyTranscationType", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ConferenceCallLogDetail", b =>
                {
                    b.Property<int>("ConferenceCallDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConferenceCallDetailId"), 1L, 1);

                    b.Property<string>("CalledOn")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("ConfJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<DateTimeOffset>("ConfLeft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<int>("ConferenceCallId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("bit");

                    b.Property<string>("Landline")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SuccessCallId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConferenceCallDetailId")
                        .HasName("PK_dbo.ConferenceCallLogDetail");

                    b.ToTable("ConferenceCallLogDetail", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ConferenceCallLogHeader", b =>
                {
                    b.Property<int>("ConferenceCallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConferenceCallId"), 1L, 1);

                    b.Property<int>("ActiveIncidentId")
                        .HasColumnType("int");

                    b.Property<string>("CloudConfId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConfRoomName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("ConfrenceEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<DateTimeOffset>("ConfrenceStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CurrentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("InitiatedBy")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<bool>("Record")
                        .HasColumnType("bit");

                    b.Property<long>("RecordingFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("RecordingSid")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecordingUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("RecordingURL");

                    b.Property<int>("TargetObjectId")
                        .HasColumnType("int");

                    b.Property<string>("TargetObjectName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ConferenceCallId")
                        .HasName("PK_dbo.ConferenceCallLogHeader");

                    b.ToTable("ConferenceCallLogHeader", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"), 1L, 1);

                    b.Property<string>("Checksum")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PrimaryContentId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryContentID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ContentId");

                    b.ToTable("Content", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ContentSection", b =>
                {
                    b.Property<int>("ContentSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContentSectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentSectionId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SectionName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SectionOrder")
                        .HasColumnType("int");

                    b.Property<string>("SectionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SopheaderId")
                        .HasColumnType("int")
                        .HasColumnName("SOPHeaderID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ContentSectionId");

                    b.ToTable("ContentSection", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ContentTag", b =>
                {
                    b.Property<int>("ContentTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContentTagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentTagId"), 1L, 1);

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ContentTagId");

                    b.ToTable("ContentTag", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ContentVersion", b =>
                {
                    b.Property<int>("ContentVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContentVersionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentVersionId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastContentId")
                        .HasColumnType("int")
                        .HasColumnName("LastContentID");

                    b.Property<int>("PrimaryContentId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryContentID");

                    b.HasKey("ContentVersionId");

                    b.ToTable("ContentVersion", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("CountryPhoneCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Iso2code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("ISO2Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("PhoneAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("Smsavailable")
                        .HasColumnType("bit")
                        .HasColumnName("SMSAvailable");

                    b.Property<string>("SmspriceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SMSPriceURL");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VoicePriceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("VoicePriceURL");

                    b.HasKey("CountryCode")
                        .HasName("PK_dbo.Countries");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CustomEventLogDetail", b =>
                {
                    b.Property<long>("EventLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("EventLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventLogId"), 1L, 1);

                    b.Property<string>("ActionDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ActionDueBy")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ActionGroup")
                        .HasColumnType("int");

                    b.Property<int?>("ActionPriority")
                        .HasColumnType("int");

                    b.Property<int?>("ActionUser")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ActionedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Cmtaction")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CMTAction");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EventLogHeaderId")
                        .HasColumnType("int")
                        .HasColumnName("EventLogHeaderID");

                    b.Property<string>("IncidentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsConfirmed")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LogEntryDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SourceOfInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.Property<int?>("StatusOfAction")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("EventLogId");

                    b.ToTable("CustomEventLogDetail", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CustomEventLogHeader", b =>
                {
                    b.Property<long>("EventLogHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("EventLogHeaderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventLogHeaderId"), 1L, 1);

                    b.Property<int>("ActiveIncidentId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PermittedDepartment")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("EventLogHeaderId");

                    b.ToTable("CustomEventLogHeader", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CustomEventLogMessage", b =>
                {
                    b.Property<long>("EventLogMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("EventLogMessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventLogMessageId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("EventLogId")
                        .HasColumnType("bigint")
                        .HasColumnName("EventLogID");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RcpntGroupId")
                        .HasColumnType("int")
                        .HasColumnName("RcpntGroupID");

                    b.Property<int?>("RcpntUserId")
                        .HasColumnType("int")
                        .HasColumnName("RcpntUserID");

                    b.HasKey("EventLogMessageId");

                    b.ToTable("CustomEventLogMessage", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.CustomLookup", b =>
                {
                    b.Property<int>("LookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LookupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupId"), 1L, 1);

                    b.Property<string>("LookupCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LookupLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LookupValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LookupId");

                    b.ToTable("CustomLookup", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.DashboardModule", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"), 1L, 1);

                    b.Property<int>("AllowMove")
                        .HasColumnType("int");

                    b.Property<int>("AllowResize")
                        .HasColumnType("int");

                    b.Property<string>("ColorScheme")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ContainerID");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,10)");

                    b.Property<int>("Locked")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxHeight")
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("MaxWidth")
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("MinHeight")
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("MinWidth")
                        .HasColumnType("decimal(18,10)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ModulePage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResizeHandle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WidgetFilePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("Xpos")
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("XPos");

                    b.Property<decimal>("Ypos")
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("YPos");

                    b.HasKey("ModuleId");

                    b.ToTable("DashboardModule", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.EmailFieldLookup", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FieldID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldId"), 1L, 1);

                    b.Property<string>("FieldCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FieldName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FieldType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("SampleValue")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ValidateField")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("FieldId");

                    b.ToTable("EmailFieldLookup", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.EmailTemplate", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TemplateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HtmlData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locale")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TemplateId");

                    b.ToTable("EmailTemplate", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.EmailTmplFieldMapping", b =>
                {
                    b.Property<int>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("FieldID");

                    b.Property<string>("TemplateCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("EmailTmplFieldMapping", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.EmptyDepartment", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.ToView("Empty_Department");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.EmptyGroup", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.ToView("Empty_Group");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.EmptyLocation", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Desc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Lat")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Location_Name");

                    b.Property<int>("LocationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Long")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToView("Empty_Location");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ErrorMessage", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Options")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ErrorId")
                        .HasName("PK_dbo.ErrorMessage");

                    b.ToTable("ErrorMessage", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ExceptionLog", b =>
                {
                    b.Property<int>("ExceptionLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExceptionLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExceptionLogId"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ErrorId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ErrorID");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ExceptionLogId");

                    b.ToTable("ExceptionLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ExTrigger", b =>
                {
                    b.Property<int>("ExTriggerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExTriggerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExTriggerId"), 1L, 1);

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("AutoForceVerify")
                        .HasColumnType("bit");

                    b.Property<string>("ColumnMappingFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ColumnMappingFileType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CommandLine")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CommandLineParams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("DeleteSourceFile")
                        .HasColumnType("bit");

                    b.Property<string>("Delimiter")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("FailureReportEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FileHasHeader")
                        .HasColumnType("bit");

                    b.Property<string>("ImportFileType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ImportSource")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("JobIncidentId")
                        .HasColumnType("int")
                        .HasColumnName("JobIncidentID");

                    b.Property<string>("JobKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("SendInvite")
                        .HasColumnType("bit");

                    b.Property<string>("Smskey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SMSKey");

                    b.Property<string>("SourceEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SourceFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SourceNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SourceNumberIsd")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("SourceNumberISD");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ExTriggerId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyId")
                        .HasDatabaseName("IX_CompanyId2");

                    b.ToTable("ExTrigger", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ExTriggerAttachment", b =>
                {
                    b.Property<int>("ExTriggerAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExTriggerAttachmentId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExTriggerQueueId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExTriggerAttachmentId");

                    b.ToTable("ExTriggerAttachment", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ExTriggerHistory", b =>
                {
                    b.Property<int>("ExTriggerHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExTriggerHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExTriggerHistoryId"), 1L, 1);

                    b.Property<string>("ActionApplied")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ExTriggerId")
                        .HasColumnType("int")
                        .HasColumnName("ExTriggerID");

                    b.Property<int>("IncidentActivationId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentActivationID");

                    b.Property<int>("PingMessageId")
                        .HasColumnType("int")
                        .HasColumnName("PingMessageID");

                    b.Property<string>("SourceEmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExTriggerHistoryId");

                    b.HasIndex(new[] { "ExTriggerId" }, "IX_ExTriggerID");

                    b.ToTable("ExTriggerHistory", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ExTriggerQueue", b =>
                {
                    b.Property<int>("ExTriggerQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExTriggerQueueID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExTriggerQueueId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EmailGuid")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("HasNewRcpntList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewMessage")
                        .HasColumnType("bit");

                    b.Property<string>("SourceEmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceFrom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TriggerKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UsersToNotify")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExTriggerQueueId");

                    b.ToTable("ExTriggerQueue", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.FailedLoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ExtraData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("IPAddress");

                    b.Property<string>("PasswordUsed")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FailedLoginAttempt", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.GetStarted", b =>
                {
                    b.Property<int>("Gsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GSId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Gsid"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("address2");

                    b.Property<int>("Assdone")
                        .HasColumnType("int")
                        .HasColumnName("assdone");

                    b.Property<string>("Cisdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CISDCode");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("companyName");

                    b.Property<string>("Country")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Depdone")
                        .HasColumnType("int")
                        .HasColumnName("depdone");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Incidone")
                        .HasColumnType("int")
                        .HasColumnName("incidone");

                    b.Property<string>("Landline")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Llisdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LLISDCode");

                    b.Property<int>("Locdone")
                        .HasColumnType("int")
                        .HasColumnName("locdone");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sessionId");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SwtchPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("Uisdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("UISDCode");

                    b.Property<int>("Userdone")
                        .HasColumnType("int")
                        .HasColumnName("userdone");

                    b.Property<string>("Website")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Gsid")
                        .HasName("PK_dbo.GetStarted");

                    b.ToTable("GetStarted", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GroupId");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.GroupSecuityObject", b =>
                {
                    b.Property<int>("GroupSecurityObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GroupSecurityObjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupSecurityObjectId"), 1L, 1);

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityObjectId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityObjectID");

                    b.HasKey("GroupSecurityObjectId");

                    b.HasIndex(new[] { "SecurityGroupId" }, "IX_SecurityGroupId");

                    b.HasIndex(new[] { "SecurityObjectId" }, "IX_SecurityObjectID");

                    b.ToTable("GroupSecuityObject");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Icon", b =>
                {
                    b.Property<int>("IconId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IconID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IconId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("IconFile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IconTags")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("IconTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IconId");

                    b.ToTable("Icon");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ImportDump", b =>
                {
                    b.Property<int>("ImportDumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportDumpId"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("GroupStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentMethods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isd")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ISD");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Llisd")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LLISD");

                    b.Property<string>("LocLat")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LocLng")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LocationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PingMethods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Security")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecurityGroupId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImportDumpId");

                    b.HasIndex(new[] { "CompanyId", "SessionId" }, "IDX_SessionID_CompanyId");

                    b.ToTable("ImportDump", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ImportDumpHeader", b =>
                {
                    b.Property<int>("ImportDumpHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportDumpHeaderId"), 1L, 1);

                    b.Property<bool>("AutoForceVerify")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ImportTriggerId")
                        .HasColumnType("int")
                        .HasColumnName("ImportTriggerID");

                    b.Property<string>("JobType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MappingFileName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("SendInvite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ImportDumpHeaderId");

                    b.ToTable("ImportDumpHeader", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ImportDumpLog", b =>
                {
                    b.Property<int>("ImportDumpHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportDumpHistoryId"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("GroupStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportDumpId")
                        .HasColumnType("int");

                    b.Property<string>("IncidentMethods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isd")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ISD");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Llisd")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LLISD");

                    b.Property<string>("LocLat")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LocLng")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PingMethods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Security")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecurityGroupId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImportDumpHistoryId")
                        .HasName("PK_dbo.ImportDumpLog");

                    b.ToTable("ImportDumpLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ImportTemplate", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TemplateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateId"), 1L, 1);

                    b.Property<string>("TemplateFile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TemplateType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TemplateId");

                    b.ToTable("ImportTemplate");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentAction", b =>
                {
                    b.Property<int>("IncidentActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentActionId"), 1L, 1);

                    b.Property<string>("ActionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IncidentActionId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status4");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Status" }, "IDX_Status"), 100);

                    b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId");

                    b.ToTable("IncidentAction", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentActivation", b =>
                {
                    b.Property<int>("IncidentActivationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentActivationId"), 1L, 1);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CascadePlanId")
                        .HasColumnType("int")
                        .HasColumnName("CascadePlanID");

                    b.Property<int?>("ClosedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ClosedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeactivatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DeactivatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTask")
                        .HasColumnType("bit");

                    b.Property<int>("ImpactedLocationId")
                        .HasColumnType("int");

                    b.Property<string>("IncidentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentIcon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int?>("InitiatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("InitiatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LaunchMode")
                        .HasColumnType("int");

                    b.Property<int?>("LaunchedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LaunchedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PlanAssetId")
                        .HasColumnType("int")
                        .HasColumnName("PlanAssetID");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<bool>("SilentMessage")
                        .HasColumnType("bit");

                    b.Property<string>("SocialHandle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TrackUser")
                        .HasColumnType("bit");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IncidentActivationId");

                    b.HasIndex(new[] { "ImpactedLocationId" }, "IDX_ImpactedLocationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ImpactedLocationId" }, "IDX_ImpactedLocationId"), 100);

                    b.HasIndex(new[] { "IncidentId" }, "IDX_IncidentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentId" }, "IDX_IncidentId"), 100);

                    b.HasIndex(new[] { "LaunchedBy" }, "IDX_LaunchedBy");

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status5");

                    b.HasIndex(new[] { "IncidentId", "CompanyId" }, "IDX_companyID");

                    b.ToTable("IncidentActivation", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentDeActivationReason", b =>
                {
                    b.Property<int>("IncidentDeActivationReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentDeActivationReasonId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IncidentActivationId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IncidentDeActivationReasonId");

                    b.HasIndex(new[] { "IncidentActivationId" }, "IX_IncidentActivationId");

                    b.ToTable("IncidentDeActivationReason", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentGroupRating", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("GroupType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MessageDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NewGroupId")
                        .HasColumnType("int")
                        .HasColumnName("NewGroupID");

                    b.Property<long?>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalIncidentAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentACK");

                    b.Property<int?>("TotalIncidentAfterKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentAfterKPIMax");

                    b.Property<int?>("TotalIncidentInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPI");

                    b.Property<int?>("TotalIncidentInKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPIMax");

                    b.Property<int?>("TotalIncidentSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentUnAck")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSent")
                        .HasColumnType("int");

                    b.ToView("IncidentGroupRating");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentKeyContact", b =>
                {
                    b.Property<int>("IncidentKeyContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentKeyContactId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IncidentActionId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("IncidentKeyContactId");

                    b.HasIndex(new[] { "IncidentId" }, "IDX_IncidentId")
                        .HasDatabaseName("IDX_IncidentId1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentId" }, "IDX_IncidentId"), 100);

                    b.HasIndex(new[] { "UserId" }, "IX_UserId")
                        .HasDatabaseName("IX_UserId1");

                    b.ToTable("IncidentKeyContact", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<bool>("Display")
                        .HasColumnType("bit");

                    b.Property<int?>("ImpactedLocationId")
                        .HasColumnType("int")
                        .HasColumnName("ImpactedLocationID");

                    b.Property<int?>("IncidentActivationId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentActivationID");

                    b.Property<int?>("LibLocationId")
                        .HasColumnType("int")
                        .HasColumnName("LibLocationID");

                    b.HasKey("LocationId");

                    b.ToTable("IncidentLocation", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentLocationLibrary", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Lat")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Lng")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LocationName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LocationType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LocationId");

                    b.ToTable("IncidentLocationLibrary", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentMessageResponse", b =>
                {
                    b.Property<int>("IncidentResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentResponseId"), 1L, 1);

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentID");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int")
                        .HasColumnName("ResponseID");

                    b.HasKey("IncidentResponseId");

                    b.ToTable("IncidentMessageResponse", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentNotificationList", b =>
                {
                    b.Property<int>("IncidentNotificationListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentNotificationListId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IncidentActivationId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectMappingId")
                        .HasColumnType("int");

                    b.Property<int>("SourceObjectPrimaryId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("IncidentNotificationListId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId3");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "IncidentActivationId" }, "IDX_IncidentActivationId")
                        .HasDatabaseName("IDX_IncidentActivationId1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentActivationId" }, "IDX_IncidentActivationId"), 100);

                    b.HasIndex(new[] { "ObjectMappingId" }, "IDX_ObjectMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ObjectMappingId" }, "IDX_ObjectMapId"), 100);

                    b.HasIndex(new[] { "SourceObjectPrimaryId" }, "IDX_SourceObjectPrimaryId")
                        .HasDatabaseName("IDX_SourceObjectPrimaryId1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SourceObjectPrimaryId" }, "IDX_SourceObjectPrimaryId"), 100);

                    b.ToTable("IncidentNotificationList", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentParticipant", b =>
                {
                    b.Property<int>("IncidentParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentParticipantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentParticipantId"), 1L, 1);

                    b.Property<int?>("IncidentActionId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentActionID");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentID");

                    b.Property<int>("ObjectMappingId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectMappingID");

                    b.Property<int?>("ParticipantGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantGroupID");

                    b.Property<string>("ParticipantType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ParticipantUserId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantUserID");

                    b.HasKey("IncidentParticipantId");

                    b.ToTable("IncidentParticipant", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentPingGroupRating", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("GroupType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MessageDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NewGroupId")
                        .HasColumnType("int")
                        .HasColumnName("NewGroupID");

                    b.Property<long?>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalIncidentAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentACK");

                    b.Property<int?>("TotalIncidentAfterKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentAfterKPIMax");

                    b.Property<int?>("TotalIncidentInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPI");

                    b.Property<int?>("TotalIncidentInKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPIMax");

                    b.Property<int?>("TotalIncidentSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentUnAck")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingACK");

                    b.Property<int?>("TotalPingAfterKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingAfterKPIMax");

                    b.Property<int?>("TotalPingInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPI");

                    b.Property<int?>("TotalPingInKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPIMax");

                    b.Property<int?>("TotalPingSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSent")
                        .HasColumnType("int");

                    b.Property<string>("Trtype")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.ToView("IncidentPingGroupRating");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentPingGroupRatingDepartment", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("MessageDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RowId")
                        .HasColumnType("int");

                    b.Property<long?>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalIncidentAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentACK");

                    b.Property<int?>("TotalIncidentAfterKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentAfterKPIMax");

                    b.Property<int?>("TotalIncidentInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPI");

                    b.Property<int?>("TotalIncidentInKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPIMax");

                    b.Property<int?>("TotalIncidentSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentUnAck")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingACK");

                    b.Property<int?>("TotalPingAfterKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingAfterKPIMax");

                    b.Property<int?>("TotalPingInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPI");

                    b.Property<int?>("TotalPingInKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPIMax");

                    b.Property<int?>("TotalPingSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSent")
                        .HasColumnType("int");

                    b.ToView("IncidentPingGroupRatingDepartment");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentPingGroupRatingLocation", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("MessageDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RowId")
                        .HasColumnType("int");

                    b.Property<long?>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalIncidentAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentACK");

                    b.Property<int?>("TotalIncidentAfterKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentAfterKPIMax");

                    b.Property<int?>("TotalIncidentInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPI");

                    b.Property<int?>("TotalIncidentInKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPIMax");

                    b.Property<int?>("TotalIncidentSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentUnAck")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingACK");

                    b.Property<int?>("TotalPingAfterKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingAfterKPIMax");

                    b.Property<int?>("TotalPingInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPI");

                    b.Property<int?>("TotalPingInKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPIMax");

                    b.Property<int?>("TotalPingSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSent")
                        .HasColumnType("int");

                    b.ToView("IncidentPingGroupRatingLocation");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentPingStat", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long?>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalIncidentAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentACK");

                    b.Property<int?>("TotalIncidentInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPI");

                    b.Property<int?>("TotalIncidentOutKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentOutKPI");

                    b.Property<int?>("TotalIncidentOutKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentOutKPIMax");

                    b.Property<int?>("TotalIncidentSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingACK");

                    b.Property<int?>("TotalPingInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPI");

                    b.Property<int?>("TotalPingOutKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingOutKPI");

                    b.Property<int?>("TotalPingOutKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingOutKPIMax");

                    b.Property<int?>("TotalPingSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSent")
                        .HasColumnType("int");

                    b.ToView("IncidentPingStats");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentPingUserRating", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("RecepientUserId")
                        .HasColumnType("int");

                    b.Property<long?>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalIncidentAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentACK");

                    b.Property<int?>("TotalIncidentInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPI");

                    b.Property<int?>("TotalIncidentSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentUnAck")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingACK");

                    b.Property<int?>("TotalPingInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPI");

                    b.Property<int?>("TotalPingSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSent")
                        .HasColumnType("int");

                    b.ToView("IncidentPingUserRating");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentSop", b =>
                {
                    b.Property<int>("IncidentSopid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentSOPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentSopid"), 1L, 1);

                    b.Property<int>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("AssetID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentID");

                    b.Property<int>("SopheaderId")
                        .HasColumnType("int")
                        .HasColumnName("SOPHeaderID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IncidentSopid");

                    b.ToTable("IncidentSOP", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentStat", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentActivationId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAfterCutOff")
                        .HasColumnType("int");

                    b.Property<long?>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalGoldenHour")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentACK");

                    b.Property<int?>("TotalIncidentInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentInKPI");

                    b.Property<int?>("TotalIncidentNotInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentNotInKPI");

                    b.Property<int?>("TotalIncidentNotInKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalIncidentNotInKPIMax");

                    b.Property<int?>("TotalIncidentSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalIncidentUnAck")
                        .HasColumnType("int");

                    b.Property<int?>("TotalWithinCutOff")
                        .HasColumnType("int");

                    b.ToView("IncidentStats");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentTaskNote", b =>
                {
                    b.Property<int>("IncidentTaskNotesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentTaskNotesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentTaskNotesId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NoteType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("IncidentTaskNotesId")
                        .HasName("PK_dbo.IncidentTaskNotes");

                    b.ToTable("IncidentTaskNote");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IncidentType", b =>
                {
                    b.Property<int>("IncidentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentTypeId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IncidentTypeId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId4");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.ToTable("IncidentType", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.IndustrySector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SectorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SectorId");

                    b.ToTable("IndustrySector", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.InvoiceStatus", b =>
                {
                    b.Property<int>("InvoiceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceStatusId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("InvoiceStatusId");

                    b.ToTable("InvoiceStatus", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"), 1L, 1);

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CommandLine")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CommandLineParams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("JobIncidentId")
                        .HasColumnType("int")
                        .HasColumnName("JobIncidentID");

                    b.Property<string>("JobName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("LastRunDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("LockedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("NextRunDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NextRunTime")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("JobId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.JobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IncidentActivationId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("JobID");

                    b.Property<string>("Message")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PingMessageId")
                        .HasColumnType("int")
                        .HasColumnName("PingMessageID");

                    b.Property<DateTimeOffset>("RunDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RunDuration")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JobHistory", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.JobSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<DateTimeOffset>("ActiveEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ActiveEndTime")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("ActiveStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ActiveStartTime")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FrequencyInterval")
                        .HasColumnType("int");

                    b.Property<int>("FrequencySubDayInterval")
                        .HasColumnType("int");

                    b.Property<string>("FrequencySubDayType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrequencyType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("JobID");

                    b.Property<DateTimeOffset>("NextRunDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NextRunTime")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RecurrenceFactor")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ScheduleId")
                        .HasName("PK_dbo.JobSchedules");

                    b.HasIndex(new[] { "JobId" }, "IX_JobID");

                    b.ToTable("JobSchedule");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LanguageItem", b =>
                {
                    b.Property<int>("LanguageItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LanguageItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageItemId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LangFile")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LangKey")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LangValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Locale")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Options")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LanguageItemId");

                    b.ToTable("LanguageItem", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibContent", b =>
                {
                    b.Property<int>("LibContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LibContentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibContentId"), 1L, 1);

                    b.Property<string>("Checksum")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PrimaryContentId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryContentID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LibContentId");

                    b.ToTable("LibContent", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibContentSection", b =>
                {
                    b.Property<int>("LibSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LibSectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibSectionId"), 1L, 1);

                    b.Property<int>("LibSopheaderId")
                        .HasColumnType("int")
                        .HasColumnName("LibSOPHeaderID");

                    b.Property<string>("SectionName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LibSectionId")
                        .HasName("PK_dbo.LibContentSection");

                    b.ToTable("LibContentSection", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibContentTag", b =>
                {
                    b.Property<int>("LibContentTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LibContentTagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibContentTagId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LibContentId")
                        .HasColumnType("int")
                        .HasColumnName("LibContentID");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LibContentTagId");

                    b.ToTable("LibContentTag", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibIncident", b =>
                {
                    b.Property<int>("LibIncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibIncidentId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDefault")
                        .HasColumnType("int");

                    b.Property<bool>("IsSos")
                        .HasColumnType("bit")
                        .HasColumnName("IsSOS");

                    b.Property<int>("LibIncidentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LibIncodentIcon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LibIncidentId");

                    b.ToTable("LibIncident", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibIncidentAction", b =>
                {
                    b.Property<int>("LibIncidentActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibIncidentActionId"), 1L, 1);

                    b.Property<string>("ActionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LibIncidentId")
                        .HasColumnType("int");

                    b.Property<int>("Predecessor")
                        .HasColumnType("int");

                    b.Property<bool>("ResponseRequired")
                        .HasColumnType("bit");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LibIncidentActionId");

                    b.ToTable("LibIncidentAction", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibIncidentType", b =>
                {
                    b.Property<int>("LibIncidentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibIncidentTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LibIncidentTypeId");

                    b.ToTable("LibIncidentType", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibMessageResponse", b =>
                {
                    b.Property<int>("LibResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LibResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibResponseId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsSafetyOption")
                        .HasColumnType("bit");

                    b.Property<string>("MessageType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ResponseLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LibResponseId")
                        .HasName("PK_dbo.LibMessageResponse");

                    b.ToTable("LibMessageResponse", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibPackageItem", b =>
                {
                    b.Property<int>("LibPackageItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibPackageItemId"), 1L, 1);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemValue")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PackagePlanId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LibPackageItemId");

                    b.ToTable("LibPackageItem", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibSopdetail", b =>
                {
                    b.Property<int>("LibSopdetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LibSOPDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibSopdetailId"), 1L, 1);

                    b.Property<int>("LibContentId")
                        .HasColumnType("int")
                        .HasColumnName("LibContentID");

                    b.Property<int>("LibContentSectionId")
                        .HasColumnType("int")
                        .HasColumnName("LibContentSectionID");

                    b.Property<int>("LibSopheaderId")
                        .HasColumnType("int")
                        .HasColumnName("LibSOPHeaderID");

                    b.HasKey("LibSopdetailId");

                    b.ToTable("LibSOPDetail", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibSopheader", b =>
                {
                    b.Property<int>("LibSopheaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LibSOPHeaderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibSopheaderId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentID");

                    b.Property<int>("NoOfUse")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ReviewDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Sopversion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SOPVersion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LibSopheaderId");

                    b.ToTable("LibSOPHeader", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.LibSopSection", b =>
                {
                    b.Property<int>("LibSopSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LibSopSectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibSopSectionId"), 1L, 1);

                    b.Property<string>("SectionName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SectionType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LibSopSectionId");

                    b.ToTable("LibSopSection");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Desc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Lat")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Location_Name");

                    b.Property<string>("Long")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LocationId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId5");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status6");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Status" }, "IDX_Status"), 100);

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Log4NetLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Thread")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Log4NetLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Lookup", b =>
                {
                    b.Property<int>("LookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupId"), 1L, 1);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LookupId");

                    b.ToTable("Lookup", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MailMerge", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CompanyID");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("EMail");

                    b.Property<string>("Email2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("EMail2");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Mail_Merge", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MergeDatum", b =>
                {
                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.ToTable("MergeDatum");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<int>("ActiveIncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentTaskID");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int?>("AttachmentCount")
                        .HasColumnType("int");

                    b.Property<int>("CascadePlanId")
                        .HasColumnType("int")
                        .HasColumnName("CascadePlanID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedTimeZone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<bool>("Email")
                        .HasColumnType("bit");

                    b.Property<int>("HasReply")
                        .HasColumnType("int");

                    b.Property<int>("IncidentActivationId")
                        .HasColumnType("int");

                    b.Property<int?>("MessageActionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MessageSourceAction")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("MessageType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("MultiResponse")
                        .HasColumnType("bit");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<bool>("Phone")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("Push")
                        .HasColumnType("bit");

                    b.Property<bool>("SilentMessage")
                        .HasColumnType("bit");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("Text")
                        .HasColumnType("bit");

                    b.Property<bool>("TrackUser")
                        .HasColumnType("bit");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("MessageId");

                    b.HasIndex(new[] { "MessageType" }, "IDX_MessageType");

                    b.HasIndex(new[] { "CreatedOn" }, "IDX_Message_CreatedOn");

                    b.HasIndex(new[] { "MessageType", "CompanyId" }, "IDX_Message_TYpe_CompanyID");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyId")
                        .HasDatabaseName("IX_CompanyId3");

                    b.HasIndex(new[] { "IncidentActivationId" }, "IX_IncidentActivationID");

                    b.HasIndex(new[] { "Priority" }, "IX_Priority");

                    b.HasIndex(new[] { "Status" }, "IX_Status");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MessageAttachment", b =>
                {
                    b.Property<int>("MessageAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageAttachmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageAttachmentId"), 1L, 1);

                    b.Property<int?>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int?>("MessageListId")
                        .HasColumnType("int")
                        .HasColumnName("MessageListID");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("MessageAttachmentId");

                    b.ToTable("MessageAttachment", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MessageDevice", b =>
                {
                    b.Property<int>("MessageDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageDeviceId"), 1L, 1);

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("CloudMessageId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDelivered")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateSent")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeviceAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LockStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("MessageListId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileIsd")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("MobileISD")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<bool>("OverrideSilent")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("SirenOn")
                        .HasColumnType("bit")
                        .HasColumnName("SirenON");

                    b.Property<string>("SoundFile")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_BIN2");

                    b.HasKey("MessageDeviceId");

                    b.HasIndex(new[] { "Attempt" }, "IDX_Attempt");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Attempt" }, "IDX_Attempt"), 100);

                    b.HasIndex(new[] { "CloudMessageId" }, "IDX_CloudMessageId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CloudMessageId" }, "IDX_CloudMessageId"), 100);

                    b.HasIndex(new[] { "LockStatus" }, "IDX_LockStatus");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LockStatus" }, "IDX_LockStatus"), 100);

                    b.HasIndex(new[] { "MessageId" }, "IDX_MessageId")
                        .HasDatabaseName("IDX_MessageId1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MessageId" }, "IDX_MessageId"), 100);

                    b.HasIndex(new[] { "MessageListId" }, "IDX_MessageListId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MessageListId" }, "IDX_MessageListId"), 100);

                    b.HasIndex(new[] { "Priority" }, "IDX_Priority");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Priority" }, "IDX_Priority"), 100);

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status7");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Status" }, "IDX_Status"), 100);

                    b.HasIndex(new[] { "UserDeviceId" }, "IDX_UserDeviceId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserDeviceId" }, "IDX_UserDeviceId"), 100);

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyId")
                        .HasDatabaseName("IX_CompanyId4");

                    b.ToTable("MessageDevice", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MessageList", b =>
                {
                    b.Property<int>("MessageListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageListId"), 1L, 1);

                    b.Property<string>("AckMethod")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateAcknowledge")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateDelivered")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateSent")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Email")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaskRecepient")
                        .HasColumnType("bit");

                    b.Property<int>("MessageAckStatus")
                        .HasColumnType("int");

                    b.Property<int>("MessageDelvStatus")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("MessageSentStatus")
                        .HasColumnType("int");

                    b.Property<bool>("Phone")
                        .HasColumnType("bit");

                    b.Property<bool>("Push")
                        .HasColumnType("bit");

                    b.Property<int>("RecepientUserId")
                        .HasColumnType("int");

                    b.Property<int>("ResponseId")
                        .HasColumnType("int")
                        .HasColumnName("ResponseID");

                    b.Property<bool>("Text")
                        .HasColumnType("bit");

                    b.Property<string>("TransportType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserLocationLat")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserLocationLong")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("MessageListId");

                    b.HasIndex(new[] { "DateSent" }, "IDX_DateSent");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DateSent" }, "IDX_DateSent"), 100);

                    b.HasIndex(new[] { "MessageDelvStatus" }, "IDX_MessageDelvStatus");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MessageDelvStatus" }, "IDX_MessageDelvStatus"), 100);

                    b.HasIndex(new[] { "MessageAckStatus" }, "IDX_MessageList_AckStatus");

                    b.HasIndex(new[] { "RecepientUserId", "MessageSentStatus", "MessageAckStatus" }, "IDX_MessageList_RecepientUserID");

                    b.HasIndex(new[] { "MessageSentStatus" }, "IDX_MessageList_SentStatus");

                    b.HasIndex(new[] { "MessageAckStatus" }, "IDX_MessagesAckStatus");

                    b.HasIndex(new[] { "RecepientUserId" }, "IDX_RecepientUserId");

                    b.HasIndex(new[] { "MessageSentStatus" }, "IX_MessageSentStatus");

                    b.HasIndex(new[] { "MessageId" }, "IX_MessgeID");

                    b.ToTable("MessageList", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MessageMethod", b =>
                {
                    b.Property<int>("MessageMethhodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageMethhodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageMethhodId"), 1L, 1);

                    b.Property<int>("ActiveIncidentId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentID");

                    b.Property<int?>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentID")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int>("MethodId")
                        .HasColumnType("int")
                        .HasColumnName("MethodID");

                    b.HasKey("MessageMethhodId");

                    b.ToTable("MessageMethod");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MessageProcessLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<string>("MethodName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("QueueName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LogId");

                    b.ToTable("MessageProcessLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MessageTransaction", b =>
                {
                    b.Property<int>("MessageTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageTransactionId"), 1L, 1);

                    b.Property<int?>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("CloudMessageId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommsProvider")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeviceAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("bit");

                    b.Property<bool>("LogCollected")
                        .HasColumnType("bit");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<int?>("MessageListId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MessageTransactionId");

                    b.HasIndex(new[] { "CloudMessageId" }, "IDX_CloudMessageId")
                        .HasDatabaseName("IDX_CloudMessageId1");

                    b.HasIndex(new[] { "IsBilled" }, "IDX_IsBilled");

                    b.HasIndex(new[] { "LogCollected" }, "IDX_LogCollected");

                    b.HasIndex(new[] { "MessageId" }, "IDX_MessageTransaction_MessageID");

                    b.HasIndex(new[] { "MessageListId" }, "IDX_MessageTransaction_MessageListID");

                    b.HasIndex(new[] { "MethodName" }, "IDX_MethodName");

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status8");

                    b.ToTable("MessageTransaction", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MethodsToLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.ToTable("MethodsToLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ModelMappingLog", b =>
                {
                    b.Property<int>("ModelMappingLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelMappingLogId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InputData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ModelMappingLogId");

                    b.ToTable("ModelMappingLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"), 1L, 1);

                    b.Property<int?>("LinkId")
                        .HasColumnType("int")
                        .HasColumnName("LinkID");

                    b.Property<string>("ModuleChargeType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ModuleOrder")
                        .HasColumnType("int");

                    b.Property<double?>("ModuleRate")
                        .HasColumnType("float");

                    b.Property<string>("ModuleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParameterKey")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SecurityObjectId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityObjectID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    b.HasKey("ModuleId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ModuleLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LinkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"), 1L, 1);

                    b.Property<int>("ItemObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ItemObjectID");

                    b.Property<int>("ModuleObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleObjectID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    b.HasKey("LinkId");

                    b.ToTable("ModuleLink", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.MonthlyTransactionItem", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<decimal>("ItemValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ThisMonthOnly")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserRole")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TransactionId")
                        .HasName("PK_dbo.MonthlyTransactionItems");

                    b.ToTable("MonthlyTransactionItem");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Object", b =>
                {
                    b.Property<int>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ObjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ObjectTableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ObjectId");

                    b.HasIndex(new[] { "ObjectName" }, "IDX_ObjectName");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ObjectName" }, "IDX_ObjectName"), 100);

                    b.ToTable("Object");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ObjectMapping", b =>
                {
                    b.Property<int>("ObjectMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectMappingId"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SourceObjectId")
                        .HasColumnType("int")
                        .HasColumnName("SourceObjectID");

                    b.Property<int>("TargetObjectId")
                        .HasColumnType("int")
                        .HasColumnName("TargetObjectID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ObjectMappingId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId6");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "SourceObjectId" }, "IDX_SouceObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SourceObjectId" }, "IDX_SouceObjectId"), 100);

                    b.HasIndex(new[] { "TargetObjectId" }, "IDX_TargetObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TargetObjectId" }, "IDX_TargetObjectId"), 100);

                    b.ToTable("ObjectMapping", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ObjectRelation", b =>
                {
                    b.Property<int>("ObjectRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectRelationId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ObjectMappingId")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveOnly")
                        .HasColumnType("bit");

                    b.Property<int>("SourceObjectPrimaryId")
                        .HasColumnType("int");

                    b.Property<int>("TargetObjectPrimaryId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ObjectRelationId");

                    b.HasIndex(new[] { "ObjectMappingId" }, "IDX_ObjectMappingId")
                        .HasDatabaseName("IDX_ObjectMappingId1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ObjectMappingId" }, "IDX_ObjectMappingId"), 100);

                    b.HasIndex(new[] { "SourceObjectPrimaryId" }, "IDX_SourceObjectPrimaryId")
                        .HasDatabaseName("IDX_SourceObjectPrimaryId2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SourceObjectPrimaryId" }, "IDX_SourceObjectPrimaryId"), 100);

                    b.HasIndex(new[] { "TargetObjectPrimaryId" }, "IDX_TargetObjectPrimaryId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TargetObjectPrimaryId" }, "IDX_TargetObjectPrimaryId"), 100);

                    b.HasIndex(new[] { "ObjectMappingId" }, "IDX_Target_Source_ID");

                    b.ToTable("ObjectRelation", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.OffDuty", b =>
                {
                    b.Property<int>("OffDutyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OffDutyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffDutyId"), 1L, 1);

                    b.Property<string>("ActivationSource")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("AllowEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPush")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowText")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("EndDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("OffDutyId");

                    b.ToTable("OffDuty", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.OffDutyHistory", b =>
                {
                    b.Property<int>("OffDutyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OffDutyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffDutyId"), 1L, 1);

                    b.Property<string>("ActivationSource")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("AllowEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPush")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowText")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("EndDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("OffDutyId");

                    b.ToTable("OffDutyHistory", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<string>("Added")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Unit")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId")
                        .HasName("PK_OrderItems");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.OrderHeader", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int?>("Activated")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContractDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ContractType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("ContractValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("KeyholderCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("NetTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("StaffCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TigerOrderNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("VatTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((-1))");

                    b.HasKey("OrderId")
                        .HasName("PK_Order");

                    b.ToTable("OrderHeader", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PackageFeature", b =>
                {
                    b.Property<int>("PackageFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageFeatureId"), 1L, 1);

                    b.Property<int>("PackagePlanId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityObjectId")
                        .HasColumnType("int");

                    b.HasKey("PackageFeatureId");

                    b.HasIndex(new[] { "SecurityObjectId" }, "IDX_SecurityObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SecurityObjectId" }, "IDX_SecurityObjectId"), 100);

                    b.HasIndex(new[] { "PackagePlanId" }, "IX_PackagePlanId");

                    b.ToTable("PackageFeature", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PasswordChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("ChangedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PasswordChangeHistory", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PaymentProfile", b =>
                {
                    b.Property<int>("PaymentProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentProfileId"), 1L, 1);

                    b.Property<decimal>("ConfUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("CreditBalance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("EmailUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumBalance")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumConfRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumEmailRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumPhoneRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumPushRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumTextRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("PhoneUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("PushUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("SoptokenValue")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("SOPTokenValue");

                    b.Property<DateTimeOffset>("StatementRunDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("TextUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PaymentProfileId");

                    b.ToTable("PaymentProfile", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PhoneNumberMapping", b =>
                {
                    b.Property<int>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MappingId"), 1L, 1);

                    b.Property<bool>("AppendToBody")
                        .HasColumnType("bit");

                    b.Property<string>("CommsProvider")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.Property<string>("CountryDialCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FromNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("MappingId")
                        .HasName("PK_dbo.PhoneNumberMapping");

                    b.ToTable("PhoneNumberMapping", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PingGroupRating", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("GroupType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MessageDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NewGroupId")
                        .HasColumnType("int")
                        .HasColumnName("NewGroupID");

                    b.Property<long?>("TotalCreated")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalPingAck")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingACK");

                    b.Property<int?>("TotalPingAfterKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingAfterKPIMax");

                    b.Property<int?>("TotalPingInKpi")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPI");

                    b.Property<int?>("TotalPingInKpimax")
                        .HasColumnType("int")
                        .HasColumnName("TotalPingInKPIMax");

                    b.Property<int?>("TotalPingSent")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPingUnAck")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSent")
                        .HasColumnType("int");

                    b.ToView("PingGroupRating");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PreContractOffer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfferID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("KeyHolderLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("KeyHolderRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MonthlyContractValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StaffLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("StaffRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YearlyContractValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OfferId")
                        .HasName("PK_dbo.PreContractOffer");

                    b.ToTable("PreContractOffer", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PriorityInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CascadingPlanId")
                        .HasColumnType("int")
                        .HasColumnName("CascadingPlanID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Methods")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyID");

                    b.HasIndex(new[] { "MessageType" }, "IDX_MessageType")
                        .HasDatabaseName("IDX_MessageType1");

                    b.ToTable("PriorityInterval", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PriorityMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Methods")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PriorityMethod", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.ProcessQueue", b =>
                {
                    b.Property<int>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueueId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("MessageType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Method")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("QueueId")
                        .HasName("PK_dbo.ProcessQueue");

                    b.ToTable("ProcessQueue", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PublicAlert", b =>
                {
                    b.Property<int>("PublicAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PublicAlertID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicAlertId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Executed")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<DateTimeOffset?>("ScheduleAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("Scheduled")
                        .HasColumnType("bit");

                    b.HasKey("PublicAlertId");

                    b.ToTable("PublicAlert", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PublicAlertList", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalUsers")
                        .HasColumnType("int");

                    b.HasKey("ListId");

                    b.ToTable("PublicAlertList", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PublicAlertMessageList", b =>
                {
                    b.Property<int>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QueueID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueueId"), 1L, 1);

                    b.Property<string>("CloudMessageId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CloudMessageID");

                    b.Property<DateTimeOffset?>("DateDelivered")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateSent")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Email")
                        .HasColumnType("bit");

                    b.Property<string>("EmailId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("EmailID");

                    b.Property<string>("Latitude")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("MessageDelvStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int>("MessageSentStatus")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Phone")
                        .HasColumnType("bit");

                    b.Property<string>("Postcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PublicAlertId")
                        .HasColumnType("int")
                        .HasColumnName("PublicAlertID");

                    b.Property<bool>("Text")
                        .HasColumnType("bit");

                    b.HasKey("QueueId")
                        .HasName("PK_PublicAlertQueue");

                    b.ToTable("PublicAlertMessageList", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PublicAlertMessageListDump", b =>
                {
                    b.Property<int>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QueueID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueueId"), 1L, 1);

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EmailId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("EmailID");

                    b.Property<string>("Latitude")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PublicAlertId")
                        .HasColumnType("int")
                        .HasColumnName("PublicAlertID");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("QueueId");

                    b.ToTable("PublicAlertMessageListDump", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PublicAlertTemplate", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TemplateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("EmailColIndex")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("LatColIndex")
                        .HasColumnType("int");

                    b.Property<int?>("LongColIndex")
                        .HasColumnType("int");

                    b.Property<int?>("PhoneColIndex")
                        .HasColumnType("int");

                    b.Property<int?>("PostcodeColIndex")
                        .HasColumnType("int");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TemplateId");

                    b.ToTable("PublicAlertTemplate", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PublicAlertUser", b =>
                {
                    b.Property<int>("UserListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserListId"), 1L, 1);

                    b.Property<string>("EmailId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("EmailID");

                    b.Property<int>("ListId")
                        .HasColumnType("int")
                        .HasColumnName("ListID");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserListId");

                    b.ToTable("PublicAlertUser", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.PushMonitor", b =>
                {
                    b.Property<int?>("AndroidCount")
                        .HasColumnType("int");

                    b.Property<int?>("AndroidSuccess")
                        .HasColumnType("int");

                    b.Property<int?>("Bbcount")
                        .HasColumnType("int")
                        .HasColumnName("BBCount");

                    b.Property<int?>("Bbsuccess")
                        .HasColumnType("int")
                        .HasColumnName("BBSuccess");

                    b.Property<int?>("IPhoneCount")
                        .HasColumnType("int")
                        .HasColumnName("iPhoneCount");

                    b.Property<int?>("IPhoneSuccess")
                        .HasColumnType("int")
                        .HasColumnName("iPhoneSuccess");

                    b.Property<string>("MessageDate")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MessageTime")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("WindowsCount")
                        .HasColumnType("int");

                    b.Property<int?>("WindowsSuccess")
                        .HasColumnType("int");

                    b.ToView("PushMonitor");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzBlobTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<byte[]>("BlobData")
                        .HasColumnType("image")
                        .HasColumnName("BLOB_DATA");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_BLOB_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzCalendar", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("CalendarName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CALENDAR_NAME");

                    b.Property<byte[]>("Calendar")
                        .IsRequired()
                        .HasColumnType("image")
                        .HasColumnName("CALENDAR");

                    b.HasKey("SchedName", "CalendarName");

                    b.ToTable("QRTZ_CALENDARS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzCronTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("CRON_EXPRESSION");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("TIME_ZONE_ID");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_CRON_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzFiredTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("EntryId")
                        .HasMaxLength(95)
                        .HasColumnType("nvarchar(95)")
                        .HasColumnName("ENTRY_ID");

                    b.Property<long>("FiredTime")
                        .HasColumnType("bigint")
                        .HasColumnName("FIRED_TIME");

                    b.Property<string>("InstanceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("INSTANCE_NAME");

                    b.Property<bool?>("IsNonconcurrent")
                        .HasColumnType("bit")
                        .HasColumnName("IS_NONCONCURRENT");

                    b.Property<string>("JobGroup")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("JobName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("JOB_NAME");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("PRIORITY");

                    b.Property<bool?>("RequestsRecovery")
                        .HasColumnType("bit")
                        .HasColumnName("REQUESTS_RECOVERY");

                    b.Property<long>("SchedTime")
                        .HasColumnType("bigint")
                        .HasColumnName("SCHED_TIME");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("STATE");

                    b.Property<string>("TriggerGroup")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_NAME");

                    b.HasKey("SchedName", "EntryId");

                    b.HasIndex(new[] { "SchedName", "InstanceName", "RequestsRecovery" }, "IDX_QRTZ_FT_INST_JOB_REQ_RCVRY");

                    b.HasIndex(new[] { "SchedName", "JobGroup" }, "IDX_QRTZ_FT_JG");

                    b.HasIndex(new[] { "SchedName", "JobName", "JobGroup" }, "IDX_QRTZ_FT_J_G");

                    b.HasIndex(new[] { "SchedName", "TriggerGroup" }, "IDX_QRTZ_FT_TG");

                    b.HasIndex(new[] { "SchedName", "InstanceName" }, "IDX_QRTZ_FT_TRIG_INST_NAME");

                    b.HasIndex(new[] { "SchedName", "TriggerName", "TriggerGroup" }, "IDX_QRTZ_FT_T_G");

                    b.ToTable("QRTZ_FIRED_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzJobDetail", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("JobName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("JOB_NAME");

                    b.Property<string>("JobGroup")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("IsDurable")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DURABLE");

                    b.Property<bool>("IsNonconcurrent")
                        .HasColumnType("bit")
                        .HasColumnName("IS_NONCONCURRENT");

                    b.Property<bool>("IsUpdateData")
                        .HasColumnType("bit")
                        .HasColumnName("IS_UPDATE_DATA");

                    b.Property<string>("JobClassName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("JOB_CLASS_NAME");

                    b.Property<byte[]>("JobData")
                        .HasColumnType("image")
                        .HasColumnName("JOB_DATA");

                    b.Property<bool>("RequestsRecovery")
                        .HasColumnType("bit")
                        .HasColumnName("REQUESTS_RECOVERY");

                    b.HasKey("SchedName", "JobName", "JobGroup");

                    b.ToTable("QRTZ_JOB_DETAILS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzLock", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("LockName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("LOCK_NAME");

                    b.HasKey("SchedName", "LockName");

                    b.ToTable("QRTZ_LOCKS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzPausedTriggerGrp", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.HasKey("SchedName", "TriggerGroup");

                    b.ToTable("QRTZ_PAUSED_TRIGGER_GRPS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzSchedulerState", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("InstanceName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("INSTANCE_NAME");

                    b.Property<long>("CheckinInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("CHECKIN_INTERVAL");

                    b.Property<long>("LastCheckinTime")
                        .HasColumnType("bigint")
                        .HasColumnName("LAST_CHECKIN_TIME");

                    b.HasKey("SchedName", "InstanceName");

                    b.ToTable("QRTZ_SCHEDULER_STATE", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzSimpleTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<int>("RepeatCount")
                        .HasColumnType("int")
                        .HasColumnName("REPEAT_COUNT");

                    b.Property<long>("RepeatInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("REPEAT_INTERVAL");

                    b.Property<int>("TimesTriggered")
                        .HasColumnType("int")
                        .HasColumnName("TIMES_TRIGGERED");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_SIMPLE_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzSimpropTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<bool?>("BoolProp1")
                        .HasColumnType("bit")
                        .HasColumnName("BOOL_PROP_1");

                    b.Property<bool?>("BoolProp2")
                        .HasColumnType("bit")
                        .HasColumnName("BOOL_PROP_2");

                    b.Property<decimal?>("DecProp1")
                        .HasColumnType("numeric(13,4)")
                        .HasColumnName("DEC_PROP_1");

                    b.Property<decimal?>("DecProp2")
                        .HasColumnType("numeric(13,4)")
                        .HasColumnName("DEC_PROP_2");

                    b.Property<int?>("IntProp1")
                        .HasColumnType("int")
                        .HasColumnName("INT_PROP_1");

                    b.Property<int?>("IntProp2")
                        .HasColumnType("int")
                        .HasColumnName("INT_PROP_2");

                    b.Property<long?>("LongProp1")
                        .HasColumnType("bigint")
                        .HasColumnName("LONG_PROP_1");

                    b.Property<long?>("LongProp2")
                        .HasColumnType("bigint")
                        .HasColumnName("LONG_PROP_2");

                    b.Property<string>("StrProp1")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("STR_PROP_1");

                    b.Property<string>("StrProp2")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("STR_PROP_2");

                    b.Property<string>("StrProp3")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("STR_PROP_3");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_SIMPROP_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("CalendarName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CALENDAR_NAME");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<long?>("EndTime")
                        .HasColumnType("bigint")
                        .HasColumnName("END_TIME");

                    b.Property<byte[]>("JobData")
                        .HasColumnType("image")
                        .HasColumnName("JOB_DATA");

                    b.Property<string>("JobGroup")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("JOB_NAME");

                    b.Property<int?>("MisfireInstr")
                        .HasColumnType("int")
                        .HasColumnName("MISFIRE_INSTR");

                    b.Property<long?>("NextFireTime")
                        .HasColumnType("bigint")
                        .HasColumnName("NEXT_FIRE_TIME");

                    b.Property<long?>("PrevFireTime")
                        .HasColumnType("bigint")
                        .HasColumnName("PREV_FIRE_TIME");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("PRIORITY");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("START_TIME");

                    b.Property<string>("TriggerState")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("TRIGGER_STATE");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("TRIGGER_TYPE");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.HasIndex(new[] { "SchedName", "CalendarName" }, "IDX_QRTZ_T_C");

                    b.HasIndex(new[] { "SchedName", "TriggerGroup" }, "IDX_QRTZ_T_G");

                    b.HasIndex(new[] { "SchedName", "JobName", "JobGroup" }, "IDX_QRTZ_T_J");

                    b.HasIndex(new[] { "SchedName", "JobGroup" }, "IDX_QRTZ_T_JG");

                    b.HasIndex(new[] { "SchedName", "NextFireTime" }, "IDX_QRTZ_T_NEXT_FIRE_TIME");

                    b.HasIndex(new[] { "SchedName", "MisfireInstr", "NextFireTime" }, "IDX_QRTZ_T_NFT_MISFIRE");

                    b.HasIndex(new[] { "SchedName", "TriggerState", "NextFireTime" }, "IDX_QRTZ_T_NFT_ST");

                    b.HasIndex(new[] { "SchedName", "MisfireInstr", "NextFireTime", "TriggerState" }, "IDX_QRTZ_T_NFT_ST_MISFIRE");

                    b.HasIndex(new[] { "SchedName", "MisfireInstr", "NextFireTime", "TriggerGroup", "TriggerState" }, "IDX_QRTZ_T_NFT_ST_MISFIRE_GRP");

                    b.HasIndex(new[] { "SchedName", "TriggerGroup", "TriggerState" }, "IDX_QRTZ_T_N_G_STATE");

                    b.HasIndex(new[] { "SchedName", "TriggerName", "TriggerGroup", "TriggerState" }, "IDX_QRTZ_T_N_STATE");

                    b.HasIndex(new[] { "SchedName", "TriggerState" }, "IDX_QRTZ_T_STATE");

                    b.ToTable("QRTZ_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Sconnection", b =>
                {
                    b.Property<int>("UserConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserConnectionId"), 1L, 1);

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int")
                        .HasColumnName("Users_UserId");

                    b.HasKey("UserConnectionId")
                        .HasName("PK_dbo.SConnection");

                    b.HasIndex(new[] { "UsersUserId" }, "IX_Users_UserId");

                    b.ToTable("SConnection", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SecurityGroup", b =>
                {
                    b.Property<int>("SecurityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityGroupId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserRole")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SecurityGroupId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyId")
                        .HasDatabaseName("IX_CompanyId5");

                    b.ToTable("SecurityGroup", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SecurityMethod", b =>
                {
                    b.Property<int>("MethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MethodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MethodId"), 1L, 1);

                    b.Property<string>("MethodName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecurityKey")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Target")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("MethodId");

                    b.ToTable("SecurityMethod", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SecurityObject", b =>
                {
                    b.Property<int>("SecurityObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityObjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityObjectId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ForIncidentManager")
                        .HasColumnType("int");

                    b.Property<decimal>("MenuOrder")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("ModuleAccess")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<bool>("RequireAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireKeyHolder")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("SecurityKey")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("ShowOnTrial")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SecurityObjectId");

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status9");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Status" }, "IDX_Status"), 100);

                    b.ToTable("SecurityObject");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SecurityObjectType", b =>
                {
                    b.Property<int>("SecurityObjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityObjectTypeId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SecurityObjectTypeId");

                    b.HasIndex(new[] { "Code" }, "IDX_Code");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Code" }, "IDX_Code"), 100);

                    b.ToTable("SecurityObjectType", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SegGroupDepartmentLink", b =>
                {
                    b.Property<int>("GroupDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupDepartmentId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("GroupDepartmentId")
                        .HasName("PK_dbo.Seg_GroupDepartment_Link");

                    b.ToTable("Seg_GroupDepartment_Link", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SegGroupIncidentLink", b =>
                {
                    b.Property<int>("GroupIncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupIncidentId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.HasKey("GroupIncidentId")
                        .HasName("PK_dbo.Seg_GroupIncident_Link");

                    b.ToTable("Seg_GroupIncident_Link", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SegGroupLocationLink", b =>
                {
                    b.Property<int>("GroupLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupLocationId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("GroupLocationId")
                        .HasName("PK_dbo.Seg_GroupLocation_Link");

                    b.ToTable("Seg_GroupLocation_Link", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SegIncidentDepartmentLink", b =>
                {
                    b.Property<int>("IncidentDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentDepartmentId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.HasKey("IncidentDepartmentId")
                        .HasName("PK_dbo.Seg_IncidentDepartment_Link");

                    b.ToTable("Seg_IncidentDepartment_Link", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SegIncidentLocationLink", b =>
                {
                    b.Property<int>("IncidentLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentLocationId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("IncidentLocationId")
                        .HasName("PK_dbo.Seg_IncidentLocation_Link");

                    b.ToTable("Seg_IncidentLocation_Link", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Site", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SiteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiteId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SiteId");

                    b.ToTable("Site", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SmsTriggerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId", "UserId" }, "IDX_CompanyID_UserID");

                    b.HasIndex(new[] { "PhoneNumber" }, "IDX_PhoneNumber");

                    b.ToTable("SMSTriggerUser", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SocialIntegraion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdnlKeyOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdnlKeyTwo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("SocialIntegraion", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Sopdetail", b =>
                {
                    b.Property<int>("SopdetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SOPDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SopdetailId"), 1L, 1);

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<int>("ContentSectionId")
                        .HasColumnType("int")
                        .HasColumnName("ContentSectionID");

                    b.Property<int>("SopheaderId")
                        .HasColumnType("int")
                        .HasColumnName("SOPHeaderID");

                    b.HasKey("SopdetailId");

                    b.ToTable("SOPDetail", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SopdetailGroup", b =>
                {
                    b.Property<int>("SopdetailGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SOPDetailGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SopdetailGroupId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SopdetailId")
                        .HasColumnType("int")
                        .HasColumnName("SOPDetailID");

                    b.Property<int>("SopgroupId")
                        .HasColumnType("int")
                        .HasColumnName("SOPGroupID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SopdetailGroupId");

                    b.ToTable("SOPDetailGroup", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Sopheader", b =>
                {
                    b.Property<int>("SopheaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SOPHeaderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SopheaderId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ReminderCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ReviewDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReviewFrequency")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Sopowner")
                        .HasColumnType("int")
                        .HasColumnName("SOPOwner");

                    b.Property<string>("Sopversion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SOPVersion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SopheaderId");

                    b.ToTable("SOPHeader", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Sosaction", b =>
                {
                    b.Property<int>("SosactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SOSActionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SosactionId"), 1L, 1);

                    b.Property<string>("ActionType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int>("SosalertId")
                        .HasColumnType("int")
                        .HasColumnName("SOSAlertID");

                    b.HasKey("SosactionId");

                    b.ToTable("SOSActions", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Sosalert", b =>
                {
                    b.Property<int>("SosalertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SOSAlertID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SosalertId"), 1L, 1);

                    b.Property<int?>("ActiveIncidentId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentID");

                    b.Property<string>("AlertType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("CallbackOption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Completed")
                        .HasColumnType("bit");

                    b.Property<int?>("CompletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Latitude")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int?>("MessageListId")
                        .HasColumnType("int")
                        .HasColumnName("MessageListID");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int")
                        .HasColumnName("ResponseID");

                    b.Property<string>("ResponseLabel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset?>("ResponseTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ResponseTimeGmt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ResponseTimeGMT");

                    b.Property<int?>("UserContactedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UserContactedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SosalertId");

                    b.ToTable("SOSAlert", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SosimpactedLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<int?>("ImpactedLocationId")
                        .HasColumnType("int")
                        .HasColumnName("ImpactedLocationID");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentID");

                    b.HasKey("LocationId");

                    b.ToTable("SOSImpactedLocation", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SosnotificationGroup", b =>
                {
                    b.Property<int>("SosnotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SOSNotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SosnotificationId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentID");

                    b.Property<int>("ObjectMappingId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectMappingID");

                    b.Property<int>("SourceObjectPrimaryId")
                        .HasColumnType("int")
                        .HasColumnName("SourceObjectPrimaryID");

                    b.HasKey("SosnotificationId")
                        .HasName("PK_dbo.SOSNotificationGroup");

                    b.ToTable("SOSNotificationGroup", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.StdTimeZone", b =>
                {
                    b.Property<int>("TimeZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TimeZoneID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeZoneId"), 1L, 1);

                    b.Property<string>("PortalTimeZone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZoneId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZoneLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TimeZoneId")
                        .HasName("PK_dbo.StdTimeZone");

                    b.ToTable("StdTimeZone", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.SysParameter", b =>
                {
                    b.Property<int>("SysParametersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SysParametersId"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SysParametersId")
                        .HasName("PK_dbo.SysParameters");

                    b.HasIndex(new[] { "Category" }, "IDX_Category");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Category" }, "IDX_Category"), 100);

                    b.HasIndex(new[] { "Name" }, "IDX_Name")
                        .HasDatabaseName("IDX_Name1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Name" }, "IDX_Name"), 100);

                    b.ToTable("SysParameter");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SearchTerms")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TagCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("TagCategoryID");

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TagId");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TagCategory", b =>
                {
                    b.Property<int>("TagCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagCategoryId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TagCategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TagCategorySearchTerms")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TagCategoryId");

                    b.ToTable("TagCategory", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskActionType", b =>
                {
                    b.Property<int>("TaskActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskActionTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskActionTypeId"), 1L, 1);

                    b.Property<string>("ActionTypeDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ActionTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NoteRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("SendNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("UpdateTaskParticipantOnly")
                        .HasColumnType("bit");

                    b.HasKey("TaskActionTypeId");

                    b.ToTable("TaskActionType", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskActiveCheckList", b =>
                {
                    b.Property<int>("ActiveCheckListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActiveCheckListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveCheckListId"), 1L, 1);

                    b.Property<int>("ActiveTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveTaskID");

                    b.Property<int>("CheckListId")
                        .HasColumnType("int")
                        .HasColumnName("CheckListID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DoneOnly")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ActiveCheckListId")
                        .HasName("PK_dbo.TaskActiveCheckList");

                    b.ToTable("TaskActiveCheckList", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskActiveCheckListResponse", b =>
                {
                    b.Property<int>("ActiveCheckListResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActiveCheckListResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveCheckListResponseId"), 1L, 1);

                    b.Property<int>("ActiveCheckListId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveCheckListID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MarkDone")
                        .HasColumnType("bit");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ResponseId")
                        .HasColumnType("int")
                        .HasColumnName("ResponseID");

                    b.HasKey("ActiveCheckListResponseId");

                    b.ToTable("TaskActiveCheckListResponse", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskActiveCheckListUserResponse", b =>
                {
                    b.Property<int>("UserResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserResponseId"), 1L, 1);

                    b.Property<int>("ActiveCheckListId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveCheckListID");

                    b.Property<int>("ActiveReponseId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveReponseID");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.HasKey("UserResponseId")
                        .HasName("PK_dbo.TaskActiveCheckListResponseOptions");

                    b.ToTable("TaskActiveCheckListUserResponse", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskActiveIncident", b =>
                {
                    b.Property<int>("ActiveIncidentTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentTaskID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveIncidentTaskId"), 1L, 1);

                    b.Property<int>("ActiveIncidentId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTimeOffset>("DelayedAccept")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DelayedComplete")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("EscalationDuration")
                        .HasColumnType("float");

                    b.Property<double>("ExpectedCompletionTime")
                        .HasColumnType("float");

                    b.Property<int>("HasCheckList")
                        .HasColumnType("int");

                    b.Property<bool>("HasNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPredecessor")
                        .HasColumnType("bit");

                    b.Property<int>("IncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentTaskID");

                    b.Property<int>("NextIncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("NextIncidentTaskID");

                    b.Property<int>("PreviousIncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("PreviousIncidentTaskID");

                    b.Property<int>("PreviousOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("PreviousOwnerID");

                    b.Property<DateTimeOffset>("TaskAcceptedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TaskActivationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TaskCompletedBy")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TaskEscalatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TaskOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("TaskOwnerID");

                    b.Property<int>("TaskSequence")
                        .HasColumnType("int");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int");

                    b.Property<string>("TaskTitle")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ActiveIncidentTaskId")
                        .HasName("PK_dbo.TaskActiveIncident");

                    b.ToTable("TaskActiveIncident", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskActiveIncidentParticipant", b =>
                {
                    b.Property<int>("ActiveIncidentTaskParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentTaskParticipantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveIncidentTaskParticipantId"), 1L, 1);

                    b.Property<string>("ActionStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ActiveIncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentTaskID");

                    b.Property<int>("ParticipantGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantGroupID");

                    b.Property<int>("ParticipantTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantTypeID");

                    b.Property<int>("ParticipantUserId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantUserID");

                    b.Property<int>("PreviousParticipantTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PreviousParticipantTypeID");

                    b.HasKey("ActiveIncidentTaskParticipantId")
                        .HasName("PK_dbo.TaskActiveIncidentParticipant");

                    b.ToTable("TaskActiveIncidentParticipant", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskActiveIncidentPredecessor", b =>
                {
                    b.Property<int>("TaskPredecessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskPredecessorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskPredecessorId"), 1L, 1);

                    b.Property<int>("ActiveIncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentTaskID");

                    b.Property<int>("PredecessorTaskId")
                        .HasColumnType("int")
                        .HasColumnName("PredecessorTaskID");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskPredecessorId")
                        .HasName("PK_dbo.TaskActiveIncidentPredecessor");

                    b.ToTable("TaskActiveIncidentPredecessor", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttachmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"), 1L, 1);

                    b.Property<int>("ActiveTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveTaskID");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("FileSize")
                        .HasColumnType("float");

                    b.Property<string>("SourceFileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TaskActionId")
                        .HasColumnType("int")
                        .HasColumnName("TaskActionID");

                    b.HasKey("AttachmentId");

                    b.ToTable("TaskAttachment", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskCheckList", b =>
                {
                    b.Property<int>("CheckListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CheckListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckListId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DoneOnly")
                        .HasColumnType("bit");

                    b.Property<int>("OptionCount")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CheckListId")
                        .HasName("PK_dbo.TaskCheckList");

                    b.ToTable("TaskCheckList", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskCheckListResponse", b =>
                {
                    b.Property<int>("CheckListResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CheckListResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckListResponseId"), 1L, 1);

                    b.Property<int>("CheckListId")
                        .HasColumnType("int")
                        .HasColumnName("CheckListID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ResponseId")
                        .HasColumnType("int")
                        .HasColumnName("ResponseID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CheckListResponseId")
                        .HasName("PK_dbo.TaskCheckListResponse");

                    b.ToTable("TaskCheckListResponse", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskHeader", b =>
                {
                    b.Property<int>("TaskHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskHeaderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskHeaderId"), 1L, 1);

                    b.Property<int?>("Author")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("NextReviewDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ReminderCount")
                        .HasColumnType("int");

                    b.Property<string>("ReviewFrequency")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Rpo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("RPO")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Rto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("RTO")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("SendReminder")
                        .HasColumnType("bit");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TaskHeaderId");

                    b.ToTable("TaskHeader", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskIncident", b =>
                {
                    b.Property<int>("IncidentTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentTaskID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentTaskId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("EscalationDuration")
                        .HasColumnType("float");

                    b.Property<double>("ExpectedCompletionTime")
                        .HasColumnType("float");

                    b.Property<bool>("HasPredecessor")
                        .HasColumnType("bit");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskHeaderId")
                        .HasColumnType("int")
                        .HasColumnName("TaskHeaderID");

                    b.Property<int>("TaskSequence")
                        .HasColumnType("int");

                    b.Property<string>("TaskTitle")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IncidentTaskId")
                        .HasName("PK_dbo.TaskIncident");

                    b.HasIndex(new[] { "IncidentId" }, "IDX_IncidentID");

                    b.HasIndex(new[] { "TaskHeaderId" }, "IDX_TaskHeaderID");

                    b.ToTable("TaskIncident", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskIncidentAction", b =>
                {
                    b.Property<int>("IncidentTaskActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentTaskActionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentTaskActionId"), 1L, 1);

                    b.Property<DateTimeOffset>("ActionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ActionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActiveIncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentTaskID");

                    b.Property<int>("TaskActionBy")
                        .HasColumnType("int");

                    b.Property<int>("TaskActionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaskActionTypeID");

                    b.HasKey("IncidentTaskActionId")
                        .HasName("PK_dbo.TaskIncidentAction");

                    b.ToTable("TaskIncidentAction", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskIncidentParticipant", b =>
                {
                    b.Property<int>("IncidentTaskParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentTaskParticipantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentTaskParticipantId"), 1L, 1);

                    b.Property<int>("IncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentTaskID");

                    b.Property<int>("ParticipantGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantGroupID");

                    b.Property<int>("ParticipantTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantTypeID");

                    b.Property<int>("ParticipantUserId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantUserID");

                    b.HasKey("IncidentTaskParticipantId")
                        .HasName("PK_dbo.TaskIncidentParticipant");

                    b.HasIndex(new[] { "IncidentTaskId" }, "IDX_IncidentTaskID");

                    b.HasIndex(new[] { "ParticipantTypeId" }, "IDX_ParticipantTypeID");

                    b.HasIndex(new[] { "ParticipantUserId" }, "IDX_ParticipantUserID");

                    b.ToTable("TaskIncidentParticipant", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskIncidentPredecessor", b =>
                {
                    b.Property<int>("TaskPredecessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskPredecessorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskPredecessorId"), 1L, 1);

                    b.Property<int>("IncidentTaskId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentTaskID");

                    b.Property<int>("PredecessorTaskId")
                        .HasColumnType("int")
                        .HasColumnName("PredecessorTaskID");

                    b.HasKey("TaskPredecessorId")
                        .HasName("PK_dbo.TaskIncidentPredecessor");

                    b.HasIndex(new[] { "IncidentTaskId" }, "IDX_IncidentTaskID")
                        .HasDatabaseName("IDX_IncidentTaskID1");

                    b.HasIndex(new[] { "PredecessorTaskId" }, "IDX_PredecessorTaskID");

                    b.ToTable("TaskIncidentPredecessor", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskParticipantType", b =>
                {
                    b.Property<int>("TaskParticipantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskParticipantTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskParticipantTypeId"), 1L, 1);

                    b.Property<string>("TaskParticipantTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TaskParticipantTypeId");

                    b.ToTable("TaskParticipantType", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TaskStatus", b =>
                {
                    b.Property<int>("TaskStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskStatusId"), 1L, 1);

                    b.Property<string>("TaskStatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TaskStatusId");

                    b.ToTable("TaskStatus", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TblTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RefObject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SourceRefId")
                        .HasColumnType("int")
                        .HasColumnName("SourceRefID");

                    b.Property<int?>("TargetRefId")
                        .HasColumnType("int")
                        .HasColumnName("TargetRefID");

                    b.HasKey("Id");

                    b.ToTable("TblTransfer", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TempEmail", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HtmlData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locale")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("TempEmail", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TextMessageLink", b =>
                {
                    b.Property<int>("MessageLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageLinkId"), 1L, 1);

                    b.Property<bool>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("MessageListId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MessageLinkId")
                        .HasName("PK_dbo.TextMessageLink");

                    b.ToTable("TextMessageLink", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TourLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TourName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TourStepId")
                        .HasColumnType("int")
                        .HasColumnName("TourStepID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("TourLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TourStep", b =>
                {
                    b.Property<int>("TourStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TourStepID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourStepId"), 1L, 1);

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HighlightKey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("HorizontalOffset")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccessible")
                        .HasColumnType("bit");

                    b.Property<string>("Margin")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ModalType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("NextAction")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NextLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OnEnterEvent")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OnLeaveEvent")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("Overlay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PrevAction")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PrevLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("StepDesc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("StepKey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<string>("StepTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TipPosition")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("TipWidth")
                        .HasColumnType("int");

                    b.Property<string>("TourKey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TourName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VerticalOffset")
                        .HasColumnType("int");

                    b.HasKey("TourStepId");

                    b.ToTable("TourStep", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TrackMe", b =>
                {
                    b.Property<int>("TrackMeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackMeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackMeId"), 1L, 1);

                    b.Property<int>("ActiveIncidentId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TrackMeStarted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TrackMeStopped")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TrackType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserDeviceId")
                        .HasColumnType("int")
                        .HasColumnName("UserDeviceID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TrackMeId");

                    b.ToTable("TrackMe", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TransactionDetail", b =>
                {
                    b.Property<int>("TransactionDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionDetailsId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Drcr")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("DRCR");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal>("LineValue")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("LineVat")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumPrice")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,4)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("TransactionRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdateOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("TransactionDetailsId")
                        .HasName("PK_dbo.TransactionDetails");

                    b.ToTable("TransactionDetail");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TransactionHeader", b =>
                {
                    b.Property<int>("TransactionHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionHeaderId"), 1L, 1);

                    b.Property<int>("AdminLimit")
                        .HasColumnType("int");

                    b.Property<int>("AdminUsers")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyPaymentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("CreditBalance")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("decimal(20,4)");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StaffLimit")
                        .HasColumnType("int");

                    b.Property<int>("StaffUsers")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StatementDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("int");

                    b.Property<double>("StorageSize")
                        .HasColumnType("float");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,4)");

                    b.Property<DateTimeOffset>("TransactionEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TransactionReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TransactionStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Vatvalue")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("VATValue");

                    b.HasKey("TransactionHeaderId");

                    b.ToTable("TransactionHeader", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"), 1L, 1);

                    b.Property<string>("ChargeType")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TwilioLogBatch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchId"), 1L, 1);

                    b.Property<string>("CommsProvider")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LogType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BatchId");

                    b.ToTable("TwilioLogBatch", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TwilioLogPushHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApiHost")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LogCollectionUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("LogCollectionURL");

                    b.HasKey("Id");

                    b.ToTable("TwilioLogPushHost", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TwilioPriceByIsdcode", b =>
                {
                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal?>("CurrentPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Isdcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ISDCode");

                    b.ToView("Twilio_Price_ByISDCode");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TwilioPricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("CountryIso2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CountryISO2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DesinationPrefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NumberType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryCode", "CountryIso2" }, "IDX_CountryCode_ISOCode2");

                    b.ToTable("TwilioPricing", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.TwoFactorAuthLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CloudMessageId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("bit");

                    b.Property<bool>("LogCollected")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ToNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TwoFactorAuthLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UndeliveredMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("MessageDeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("MessageDeviceID");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ScheduleFlag")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UndeliveredMessage");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserComm", b =>
                {
                    b.Property<int>("UserCommsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCommsId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCommsId")
                        .HasName("PK_dbo.UserComms");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId7");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "UserId", "MethodId", "MessageType" }, "IDX_Method_Type_User");

                    b.ToTable("UserComm");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserDepartment", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<int?>("UniqueId")
                        .HasColumnType("int")
                        .HasColumnName("UniqueID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("UserStatus")
                        .HasColumnType("int");

                    b.ToView("User_Department");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserDevice", b =>
                {
                    b.Property<int>("UserDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserDeviceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDeviceId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("DeviceID");

                    b.Property<string>("DeviceModel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeviceOs")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DeviceOS");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("OverrideSilent")
                        .HasColumnType("bit");

                    b.Property<bool>("SirenOn")
                        .HasColumnType("bit")
                        .HasColumnName("SirenON");

                    b.Property<string>("SoundFile")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('default')");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserDeviceId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId8");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "DeviceSerial" }, "IDX_DeviceSerial");

                    b.HasIndex(new[] { "Status" }, "IDX_Status")
                        .HasDatabaseName("IDX_Status10");

                    b.HasIndex(new[] { "UserId" }, "IX_UserID");

                    b.ToTable("UserDevice");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserGroup", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<bool>("ReceiveOnly")
                        .HasColumnType("bit");

                    b.Property<int>("UniqueId")
                        .HasColumnType("int")
                        .HasColumnName("UniqueID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.ToView("User_Group");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserLocation", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Desc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Lat")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Location_Name");

                    b.Property<int>("LocationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Long")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("ReceiveOnly")
                        .HasColumnType("bit");

                    b.Property<int>("UniqueId")
                        .HasColumnType("int")
                        .HasColumnName("UniqueID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.ToView("User_Location");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserLocation1", b =>
                {
                    b.Property<int>("UserLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserLocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLocationId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOnGmt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOnGMT");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("UserDeviceId")
                        .HasColumnType("int")
                        .HasColumnName("UserDeviceID");

                    b.Property<DateTimeOffset>("UserDeviceTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserLocationId")
                        .HasName("PK_dbo.UserLocation");

                    b.ToTable("UserLocation", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserLoginLog", b =>
                {
                    b.Property<int>("UserLoginLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLoginLogId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<DateTimeOffset>("LoggedInTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserLoginLogId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId9");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "UserId" }, "IDX_UserId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "IDX_UserId"), 100);

                    b.ToTable("UserLoginLog", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserMessageCount", b =>
                {
                    b.Property<int>("ActiveCompletedTask")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long?>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<int>("PendingTask")
                        .HasColumnType("int");

                    b.Property<int>("TaskCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalIncidentUnAck")
                        .HasColumnType("int");

                    b.Property<int>("TotalPingUnAck")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.ToView("UserMessageCount");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserModuleLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,10)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("Xpos")
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("XPos");

                    b.Property<decimal>("Ypos")
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("YPos");

                    b.HasKey("Id");

                    b.ToTable("UserModuleLInk", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserRoleChange", b =>
                {
                    b.Property<int>("RoleChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleChangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleChangeId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserRole")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleChangeId")
                        .HasName("PK_dbo.UserRoleChange");

                    b.ToTable("UserRoleChange", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UserSecurityGroup", b =>
                {
                    b.Property<int>("UserSecurityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserSecurityGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSecurityGroupId"), 1L, 1);

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserSecurityGroupId");

                    b.HasIndex(new[] { "SecurityGroupId" }, "IX_SecurityGroupId")
                        .HasDatabaseName("IX_SecurityGroupId1");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId")
                        .HasDatabaseName("IX_UserId2");

                    b.ToTable("UserSecurityGroup", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UsersSearch", b =>
                {
                    b.Property<byte[]>("SearchFieldEncrypted")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("SearchField_Encrypted");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToTable("UsersSearch", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.UsersToNotify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActiveIncidentId")
                        .HasColumnType("int")
                        .HasColumnName("ActiveIncidentID");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MessageId" }, "IDX_MessageID");

                    b.HasIndex(new[] { "UserId" }, "IDX_UserID");

                    b.ToTable("UsersToNotify", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Models.VwUserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToView("vw_UserGroups");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.VwUserLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToView("vw_UserLocations");
                });

            modelBuilder.Entity("CrisesControl.Core.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("ActiveOffDuty")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool?>("ExpirePassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Isdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ISDCode")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Landline")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<DateTimeOffset>("LastLocationUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Lat")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Llisdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LLISDCode")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Lng")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Otpcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("OTPCode");

                    b.Property<DateTimeOffset>("Otpexpiry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("OTPExpiry")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<DateTimeOffset>("PasswordChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<string>("PrimaryEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<bool>("RegisteredUser")
                        .HasColumnType("bit");

                    b.Property<string>("SecondaryEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<bool>("Smstrigger")
                        .HasColumnType("bit")
                        .HasColumnName("SMSTrigger");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimezoneId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TrackingEndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<DateTimeOffset>("TrackingStartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<string>("UniqueGuiId")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("UniqueGuiID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserHash")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("char(32)")
                        .IsFixedLength();

                    b.Property<string>("UserLanguage")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserPhoto")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("UserRole")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId")
                        .HasDatabaseName("IDX_CompanyId10");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IDX_CompanyId"), 100);

                    b.HasIndex(new[] { "FirstName", "LastName" }, "IDX_FirstName_LastName");

                    b.HasIndex(new[] { "PrimaryEmail", "Password" }, "IDX_PrimaryEmail");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PrimaryEmail", "Password" }, "IDX_PrimaryEmail"), 100);

                    b.HasIndex(new[] { "RegisteredUser" }, "IDX_RegisteredUser");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegisteredUser" }, "IDX_RegisteredUser"), 100);

                    b.HasIndex(new[] { "UniqueGuiId" }, "IDX_UniqueGUID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UniqueGuiId" }, "IDX_UniqueGUID"), 100);

                    b.HasIndex(new[] { "UserRole" }, "IDX_UserRole");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CrisesControl.Core.Companies.Company", b =>
                {
                    b.HasOne("CrisesControl.Core.Companies.PackagePlan", "PackagePlan")
                        .WithMany()
                        .HasForeignKey("PackagePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackagePlan");
                });

            modelBuilder.Entity("CrisesControl.Core.Companies.CompanyPaymentProfile", b =>
                {
                    b.HasOne("CrisesControl.Core.Companies.Company", null)
                        .WithMany("CompanyPaymentProfiles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzCronTrigger", b =>
                {
                    b.HasOne("CrisesControl.Core.Models.QrtzTrigger", "QrtzTrigger")
                        .WithOne("QrtzCronTrigger")
                        .HasForeignKey("CrisesControl.Core.Models.QrtzCronTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS");

                    b.Navigation("QrtzTrigger");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzSimpleTrigger", b =>
                {
                    b.HasOne("CrisesControl.Core.Models.QrtzTrigger", "QrtzTrigger")
                        .WithOne("QrtzSimpleTrigger")
                        .HasForeignKey("CrisesControl.Core.Models.QrtzSimpleTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS");

                    b.Navigation("QrtzTrigger");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzSimpropTrigger", b =>
                {
                    b.HasOne("CrisesControl.Core.Models.QrtzTrigger", "QrtzTrigger")
                        .WithOne("QrtzSimpropTrigger")
                        .HasForeignKey("CrisesControl.Core.Models.QrtzSimpropTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS");

                    b.Navigation("QrtzTrigger");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzTrigger", b =>
                {
                    b.HasOne("CrisesControl.Core.Models.QrtzJobDetail", "QrtzJobDetail")
                        .WithMany("QrtzTriggers")
                        .HasForeignKey("SchedName", "JobName", "JobGroup")
                        .IsRequired()
                        .HasConstraintName("FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS");

                    b.Navigation("QrtzJobDetail");
                });

            modelBuilder.Entity("CrisesControl.Core.Users.User", b =>
                {
                    b.HasOne("CrisesControl.Core.Companies.Company", null)
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrisesControl.Core.Companies.Company", b =>
                {
                    b.Navigation("CompanyPaymentProfiles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzJobDetail", b =>
                {
                    b.Navigation("QrtzTriggers");
                });

            modelBuilder.Entity("CrisesControl.Core.Models.QrtzTrigger", b =>
                {
                    b.Navigation("QrtzCronTrigger")
                        .IsRequired();

                    b.Navigation("QrtzSimpleTrigger")
                        .IsRequired();

                    b.Navigation("QrtzSimpropTrigger")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
