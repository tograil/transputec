// <auto-generated />
using System;
using CC.Authority.Implementation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CC.Authority.Implementation.Migrations
{
    [DbContext(typeof(CrisesControlAuthContext))]
    [Migration("20220615120146_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CC.Authority.Implementation.Models.Company", b =>
                {
                    b.Property<string>("AndroidLogo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("AnniversaryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyLogoPath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Company_Name");

                    b.Property<string>("CompanyProfile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactLogoPath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IOslogo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("iOSLogo");

                    b.Property<string>("InvitationCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Isdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ISDCode");

                    b.Property<bool>("OnTrial")
                        .HasColumnType("bit");

                    b.Property<int?>("PackagePlanId")
                        .HasColumnType("int");

                    b.Property<string>("PlanDrdoc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PlanDRDoc");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Sector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SwitchBoardPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("UniqueKey")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Ukrainian_BIN2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Website")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WindowsLogo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.CompanyParameter", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyParametersId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("CompanyParameters");
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.CompanyPaymentProfile", b =>
                {
                    b.Property<string>("AgreementNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BillingAddress1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BillingAddress2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BillingEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset>("CardExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("CardFailed")
                        .HasColumnType("bit");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CardType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyPaymentProfileId")
                        .HasColumnType("int");

                    b.Property<decimal>("ConfUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<DateTimeOffset>("ContractAnniversary")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ContractStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Country")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("CreditBalance")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(20,4)");

                    b.Property<DateTimeOffset>("CurrentStatementEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("EmailUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<DateTimeOffset>("LastCreditDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastStatementEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MaxTransactionLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumBalance")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumConfRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumEmailRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumPhoneRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumPushRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumTextRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<bool?>("OrderCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentPeriod")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("PhoneUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("PushUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("SoptokenValue")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("SOPTokenValue");

                    b.Property<DateTimeOffset>("StatementRunDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("TextUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("Vatrate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("VATRate");

                    b.ToTable("CompanyPaymentProfile", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("CountryPhoneCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Iso2code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("ISO2Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("PhoneAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("Smsavailable")
                        .HasColumnType("bit")
                        .HasColumnName("SMSAvailable");

                    b.Property<string>("SmspriceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SMSPriceURL");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VoicePriceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("VoicePriceURL");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.Department", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.FailedLoginAttempt", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ExtraData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("IPAddress");

                    b.Property<string>("PasswordUsed")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToTable("FailedLoginAttempt", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.GetStarted", b =>
                {
                    b.Property<string>("Address1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("address2");

                    b.Property<int>("Assdone")
                        .HasColumnType("int")
                        .HasColumnName("assdone");

                    b.Property<string>("Cisdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CISDCode");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("companyName");

                    b.Property<string>("Country")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Depdone")
                        .HasColumnType("int")
                        .HasColumnName("depdone");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Gsid")
                        .HasColumnType("int")
                        .HasColumnName("GSId");

                    b.Property<int>("Incidone")
                        .HasColumnType("int")
                        .HasColumnName("incidone");

                    b.Property<string>("Landline")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Llisdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LLISDCode");

                    b.Property<int>("Locdone")
                        .HasColumnType("int")
                        .HasColumnName("locdone");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sessionId");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SwtchPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("Uisdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("UISDCode");

                    b.Property<int>("Userdone")
                        .HasColumnType("int")
                        .HasColumnName("userdone");

                    b.Property<string>("Website")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToTable("GetStarted", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.Group", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.Location", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Desc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Lat")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Location_Name");

                    b.Property<string>("Long")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.ObjectRelation", b =>
                {
                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ObjectMappingId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectRelationId")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveOnly")
                        .HasColumnType("bit");

                    b.Property<int>("SourceObjectPrimaryId")
                        .HasColumnType("int");

                    b.Property<int>("TargetObjectPrimaryId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("ObjectRelation", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.PasswordChangeHistory", b =>
                {
                    b.Property<DateTimeOffset>("ChangedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToTable("PasswordChangeHistory", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.PaymentProfile", b =>
                {
                    b.Property<decimal>("ConfUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("CreditBalance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("EmailUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumBalance")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumConfRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumEmailRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumPhoneRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumPushRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("MinimumTextRate")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int>("PaymentProfileId")
                        .HasColumnType("int");

                    b.Property<decimal>("PhoneUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("PushUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<decimal>("SoptokenValue")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("SOPTokenValue");

                    b.Property<DateTimeOffset>("StatementRunDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StorageLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("TextUplift")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("PaymentProfile", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.PreContractOffer", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("KeyHolderLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("KeyHolderRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MonthlyContractValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasColumnName("OfferID");

                    b.Property<int>("StaffLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("StaffRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YearlyContractValue")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("PreContractOffer", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.SecurityGroup", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserRole")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("SecurityGroup", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.StdTimeZone", b =>
                {
                    b.Property<string>("PortalTimeZone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int")
                        .HasColumnName("TimeZoneID");

                    b.Property<string>("ZoneId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZoneLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("StdTimeZone", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.TwoFactorAuthLog", b =>
                {
                    b.Property<string>("CloudMessageId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("bit");

                    b.Property<bool>("LogCollected")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ToNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToTable("TwoFactorAuthLog", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.User", b =>
                {
                    b.Property<int>("ActiveOffDuty")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("ExpirePassword")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Ukrainian_BIN2");

                    b.Property<string>("Isdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ISDCode")
                        .UseCollation("Ukrainian_BIN2");

                    b.Property<string>("Landline")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("LastLocationUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .UseCollation("Ukrainian_BIN2");

                    b.Property<string>("Lat")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Llisdcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("LLISDCode")
                        .UseCollation("Ukrainian_BIN2");

                    b.Property<string>("Lng")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("Ukrainian_BIN2");

                    b.Property<string>("Otpcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("OTPCode");

                    b.Property<DateTimeOffset>("Otpexpiry")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("OTPExpiry");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Ukrainian_BIN2");

                    b.Property<DateTimeOffset>("PasswordChangeDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PrimaryEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Ukrainian_BIN2");

                    b.Property<bool>("RegisteredUser")
                        .HasColumnType("bit");

                    b.Property<string>("SecondaryEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Ukrainian_BIN2");

                    b.Property<bool>("Smstrigger")
                        .HasColumnType("bit")
                        .HasColumnName("SMSTrigger");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimezoneId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TrackingEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TrackingStartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UniqueGuiId")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("UniqueGuiID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserHash")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("char(32)")
                        .IsFixedLength();

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserLanguage")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserPhoto")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("UserRole")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.UserDepartment", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("UniqueId")
                        .HasColumnType("int")
                        .HasColumnName("UniqueID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("UserStatus")
                        .HasColumnType("int");

                    b.ToTable("User_Department", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.UserGroup", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("ReceiveOnly")
                        .HasColumnType("bit");

                    b.Property<int>("UniqueId")
                        .HasColumnType("int")
                        .HasColumnName("UniqueID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.ToTable("User_Group", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.UserLocation", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Desc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Lat")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Location_Name");

                    b.Property<int>("LocationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Long")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("ReceiveOnly")
                        .HasColumnType("bit");

                    b.Property<int>("UniqueId")
                        .HasColumnType("int")
                        .HasColumnName("UniqueID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.ToTable("User_Location", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.UserLocation1", b =>
                {
                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOnGmt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOnGMT");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("UserDeviceId")
                        .HasColumnType("int")
                        .HasColumnName("UserDeviceID");

                    b.Property<DateTimeOffset>("UserDeviceTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("UserLocationId")
                        .HasColumnType("int")
                        .HasColumnName("UserLocationID");

                    b.ToTable("UserLocation", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.UserRole", b =>
                {
                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.UserRoleChange", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RoleChangeId")
                        .HasColumnType("int")
                        .HasColumnName("RoleChangeID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserRole")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("UserRoleChange", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.UserSecurityGroup", b =>
                {
                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserSecurityGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserSecurityGroupID");

                    b.ToTable("UserSecurityGroup", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.VwUserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToTable("vw_UserGroups", (string)null);
                });

            modelBuilder.Entity("CC.Authority.Implementation.Models.VwUserLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToTable("vw_UserLocations", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
